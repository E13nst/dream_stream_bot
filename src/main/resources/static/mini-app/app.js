// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
const tg = window.Telegram.WebApp;
tg.expand();
tg.ready();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
document.documentElement.style.setProperty('--tg-theme-bg-color', tg.themeParams.bg_color || '#ffffff');
document.documentElement.style.setProperty('--tg-theme-text-color', tg.themeParams.text_color || '#000000');
document.documentElement.style.setProperty('--tg-theme-hint-color', tg.themeParams.hint_color || '#999999');
document.documentElement.style.setProperty('--tg-theme-button-color', tg.themeParams.button_color || '#2481cc');
document.documentElement.style.setProperty('--tg-theme-button-text-color', tg.themeParams.button_text_color || '#ffffff');
document.documentElement.style.setProperty('--tg-theme-secondary-bg-color', tg.themeParams.secondary_bg_color || '#f8f9fa');

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
const user = tg.initDataUnsafe?.user;
const userId = user?.id;

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
if (user) {
    document.getElementById('userInfo').innerHTML = `
        <p>–ü—Ä–∏–≤–µ—Ç, <strong>${user.first_name}${user.last_name ? ' ' + user.last_name : ''}</strong>!</p>
        <p>ID: <strong>${user.id}</strong></p>
    `;
} else {
    document.getElementById('userInfo').innerHTML = `
        <p>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω</p>
    `;
}

// API –±–∞–∑–æ–≤—ã–π URL
const API_BASE = '/api/stickersets';

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤
async function loadStickers() {
    try {
        const loading = document.getElementById('loading');
        loading.innerHTML = '<p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤...</p>';

        let url = API_BASE;
        if (userId) {
            url = `${API_BASE}/user/${userId}`;
        }

        const response = await fetch(url);
        if (response.ok) {
            const stickers = await response.json();
            displayStickers(stickers);
        } else {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤:', error);
        document.getElementById('content').innerHTML = `
            <div class="error">
                <p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤: ${error.message}</p>
                <button class="btn btn-primary" onclick="loadStickers()">–ü–æ–≤—Ç–æ—Ä–∏—Ç—å</button>
            </div>
        `;
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–æ–≤
function displayStickers(stickers) {
    const content = document.getElementById('content');

    if (!stickers || stickers.length === 0) {
        content.innerHTML = `
            <div class="empty-state">
                <h3>ÔøΩÔøΩ –°—Ç–∏–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤ —Å—Ç–∏–∫–µ—Ä–æ–≤</p>
                <button class="btn btn-primary" onclick="tg.openTelegramLink('https://t.me/your_bot_username')">
                    –°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä
                </button>
            </div>
        `;
        return;
    }

    const stickersHtml = stickers.map(sticker => `
        <div class="sticker-card" data-title="${sticker.title.toLowerCase()}">
            <h3>${sticker.title}</h3>
            <p>ID: ${sticker.id}</p>
            <p>–°–æ–∑–¥–∞–Ω: ${new Date(sticker.createdAt).toLocaleDateString()}</p>
            <div class="sticker-actions">
                <button class="btn btn-primary" onclick="openStickerSet('${sticker.name}')">
                    –û—Ç–∫—Ä—ã—Ç—å
                </button>
                <button class="btn btn-secondary" onclick="shareStickerSet('${sticker.name}', '${sticker.title}')">
                    –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
                </button>
                <button class="btn btn-danger" onclick="deleteStickerSet(${sticker.id}, '${sticker.title}')">
                    –£–¥–∞–ª–∏—Ç—å
                </button>
            </div>
        </div>
    `).join('');

    content.innerHTML = `
        <div class="sticker-grid" id="stickerGrid">
            ${stickersHtml}
        </div>
    `;
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∏–∫–µ—Ä–æ–≤
function filterStickers() {
    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
    const stickerCards = document.querySelectorAll('.sticker-card');

    stickerCards.forEach(card => {
        const title = card.getAttribute('data-title');
        if (title.includes(searchTerm)) {
            card.style.display = 'block';
        } else {
            card.style.display = 'none';
        }
    });
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞–±–æ—Ä–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤ Telegram
function openStickerSet(stickerSetName) {
    const url = `https://t.me/addstickers/${stickerSetName}`;
    tg.openTelegramLink(url);
}

// –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–∞–±–æ—Ä–æ–º —Å—Ç–∏–∫–µ—Ä–æ–≤
function shareStickerSet(stickerSetName, title) {
    const shareText = `üé® –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –º–æ–π –Ω–∞–±–æ—Ä —Å—Ç–∏–∫–µ—Ä–æ–≤ "${title}": https://t.me/addstickers/${stickerSetName}`;
    tg.shareUrl(shareText, `https://t.me/addstickers/${stickerSetName}`);
}

// –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤
async function deleteStickerSet(id, title) {
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–∞–±–æ—Ä —Å—Ç–∏–∫–µ—Ä–æ–≤ "${title}"?`)) {
        return;
    }

    try {
        const response = await fetch(`${API_BASE}/${id}`, {
            method: 'DELETE'
        });

        if (response.ok) {
            tg.showAlert(`–ù–∞–±–æ—Ä —Å—Ç–∏–∫–µ—Ä–æ–≤ "${title}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`);
            loadStickers(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
        } else {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
        tg.showAlert(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${error.message}`);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
tg.BackButton.onClick(() => {
    tg.close();
});

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
tg.BackButton.show();

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∏–∫–µ—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', loadStickers);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
window.addEventListener('error', (event) => {
    console.error('–û—à–∏–±–∫–∞:', event.error);
    tg.showAlert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏');
});