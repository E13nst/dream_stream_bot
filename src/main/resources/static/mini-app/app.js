// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
const tg = window.Telegram.WebApp;
tg.expand();
tg.ready();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
document.documentElement.style.setProperty('--tg-theme-bg-color', tg.themeParams.bg_color || '#ffffff');
document.documentElement.style.setProperty('--tg-theme-text-color', tg.themeParams.text_color || '#000000');
document.documentElement.style.setProperty('--tg-theme-hint-color', tg.themeParams.hint_color || '#999999');
document.documentElement.style.setProperty('--tg-theme-button-color', tg.themeParams.button_color || '#2481cc');
document.documentElement.style.setProperty('--tg-theme-button-text-color', tg.themeParams.button_text_color || '#ffffff');
document.documentElement.style.setProperty('--tg-theme-secondary-bg-color', tg.themeParams.secondary_bg_color || '#f8f9fa');

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
let user = tg.initDataUnsafe?.user;
const userId = user?.id;
let initData = tg.initData;

// –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
console.log('üîç Telegram Web App –¥–∞–Ω–Ω—ã–µ:');
console.log('tg.initData:', initData ? 'present (' + initData.length + ' chars)' : 'null');
console.log('tg.initDataUnsafe:', tg.initDataUnsafe);
console.log('user:', user);
console.log('platform:', tg.platform);
console.log('version:', tg.version);

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è initData
function checkInitDataExpiry(initDataString) {
    if (!initDataString) return { valid: false, reason: 'initData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' };
    
    try {
        const params = new URLSearchParams(initDataString);
        const authDate = parseInt(params.get('auth_date'));
        
        if (!authDate) {
            return { valid: false, reason: 'auth_date –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' };
        }
        
        const now = Math.floor(Date.now() / 1000);
        const age = now - authDate;
        const maxAge = 600; // 10 –º–∏–Ω—É—Ç (–∫–∞–∫ –≤ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–µ)
        
        console.log('üïê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è initData:');
        console.log('auth_date:', authDate, '(' + new Date(authDate * 1000).toLocaleString() + ')');
        console.log('current time:', now, '(' + new Date(now * 1000).toLocaleString() + ')');
        console.log('age:', age, '—Å–µ–∫—É–Ω–¥');
        console.log('max age:', maxAge, '—Å–µ–∫—É–Ω–¥');
        
        if (age > maxAge) {
            return { 
                valid: false, 
                reason: `initData —É—Å—Ç–∞—Ä–µ–ª (–≤–æ–∑—Ä–∞—Å—Ç: ${age} —Å–µ–∫, –º–∞–∫—Å–∏–º—É–º: ${maxAge} —Å–µ–∫)`,
                age: age,
                maxAge: maxAge
            };
        }
        
        return { valid: true, age: age, maxAge: maxAge };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è initData:', error);
        return { valid: false, reason: '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ initData: ' + error.message };
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è initData
function refreshInitData() {
    console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è initData...');
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram Web App
    const newUser = tg.initDataUnsafe?.user;
    const newInitData = tg.initData;
    
    if (newInitData && newInitData !== initData) {
        console.log('‚úÖ initData –æ–±–Ω–æ–≤–ª–µ–Ω');
        user = newUser;
        initData = newInitData;
        return true;
    } else {
        console.log('‚ùå initData –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è');
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
function retryWithRefresh() {
    console.log('üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö...');
    if (refreshInitData()) {
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∏–∫–µ—Ä—ã...');
        loadStickers();
    } else {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –±–æ—Ç–∞');
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –±–æ—Ç–∞.');
    }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è initData –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
const initDataCheck = checkInitDataExpiry(initData);
if (!initDataCheck.valid) {
    console.warn('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å initData:', initDataCheck.reason);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞
function logDebugInfoWithResponse(status, statusText) {
    console.log('üåê –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –∫ API:', status, statusText);
    console.log('üïê –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞:', new Date().toLocaleTimeString());
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ initData
function updateDebugInfo() {
    const debugContent = document.getElementById('debugContent');
    if (!debugContent) return;
    
    const now = new Date();
    const authDate = initData ? new URLSearchParams(initData).get('auth_date') : null;
    const authDateTime = authDate ? new Date(parseInt(authDate) * 1000) : null;
    const signature = initData ? new URLSearchParams(initData).get('signature') : null;
    const hash = initData ? new URLSearchParams(initData).get('hash') : null;
    const queryId = initData ? new URLSearchParams(initData).get('query_id') : null;
    
    const debugInfo = `
<div class="debug-item">
    <span class="debug-label">üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:</span>
    <span class="debug-value">${now.toLocaleString()}</span>
</div>

<div class="debug-item">
    <span class="debug-label">üì± Telegram Platform:</span>
    <span class="debug-value">${tg.platform || 'unknown'}</span>
</div>

<div class="debug-item">
    <span class="debug-label">üìã Telegram Version:</span>
    <span class="debug-value">${tg.version || 'unknown'}</span>
</div>

<div class="debug-item">
    <span class="debug-label">üîê InitData –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç:</span>
    <span class="debug-value">${initData ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}</span>
</div>

<div class="debug-item">
    <span class="debug-label">üìè InitData –¥–ª–∏–Ω–∞:</span>
    <span class="debug-value">${initData ? initData.length + ' —Å–∏–º–≤–æ–ª–æ–≤' : 'N/A'}</span>
</div>

<div class="debug-item">
    <span class="debug-label">üïí Auth Date:</span>
    <span class="debug-value">${authDateTime ? authDateTime.toLocaleString() : '–Ω–µ –Ω–∞–π–¥–µ–Ω'}</span>
</div>

<div class="debug-item">
    <span class="debug-label">‚è∞ –í–æ–∑—Ä–∞—Å—Ç InitData:</span>
    <span class="debug-value">${authDate ? Math.floor((now.getTime() - authDateTime.getTime()) / 1000) + ' —Å–µ–∫—É–Ω–¥' : 'N/A'}</span>
</div>

<div class="debug-item">
    <span class="debug-label">‚úçÔ∏è Signature:</span>
    <span class="debug-value">${signature ? '‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç (' + signature.length + ' —Å–∏–º–≤–æ–ª–æ–≤)' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</span>
</div>

<div class="debug-item">
    <span class="debug-label">#Ô∏è‚É£ Hash:</span>
    <span class="debug-value">${hash ? '‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç (' + hash.length + ' —Å–∏–º–≤–æ–ª–æ–≤)' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</span>
</div>

<div class="debug-item">
    <span class="debug-label">üÜî Query ID:</span>
    <span class="debug-value">${queryId || '–Ω–µ –Ω–∞–π–¥–µ–Ω'}</span>
</div>

<div class="debug-item">
    <span class="debug-label">üë§ User ID:</span>
    <span class="debug-value">${user?.id || '–Ω–µ –Ω–∞–π–¥–µ–Ω'}</span>
</div>

<div class="debug-item">
    <span class="debug-label">üåê API Endpoint:</span>
    <span class="debug-value">${window.location.origin}/auth/status</span>
</div>

<div class="debug-item">
    <span class="debug-label">‚úÖ InitData –≤–∞–ª–∏–¥–∞—Ü–∏—è:</span>
    <span class="debug-value">${initDataCheck.valid ? '‚úÖ –í–∞–ª–∏–¥–Ω–∞' : '‚ùå ' + initDataCheck.reason}</span>
</div>

<div class="debug-item">
    <span class="debug-label">üî§ InitData (–ø–æ–ª–Ω–∞—è —Å—Ç—Ä–æ–∫–∞):</span>
    <span class="debug-value">${initData || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</span>
</div>
    `;
    
    debugContent.innerHTML = debugInfo;
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
if (user) {
    document.getElementById('userInfo').innerHTML = `
        <p>–ü—Ä–∏–≤–µ—Ç, <strong>${user.first_name}${user.last_name ? ' ' + user.last_name : ''}</strong>!</p>
        <p>ID: <strong>${user.id}</strong></p>
        ${user.username ? `<p>Username: <strong>@${user.username}</strong></p>` : ''}
    `;
} else {
    document.getElementById('userInfo').innerHTML = `
        <p>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω</p>
    `;
}

// API –±–∞–∑–æ–≤—ã–π URL
const API_BASE = '/api/stickersets';
const AUTH_BASE = '/auth';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
function getAuthHeaders() {
    const headers = {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
    };
    
    if (initData) {
        headers['X-Telegram-Init-Data'] = initData;
        headers['X-Telegram-Bot-Name'] = 'StickerGallery';
        console.log('‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
        console.log('X-Telegram-Bot-Name: StickerGallery');
        console.log('X-Telegram-Init-Data: present');
    } else {
        console.warn('‚ö†Ô∏è initData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∑–∞–ø—Ä–æ—Å –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
    }
    
    return headers;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
async function checkAuthStatus() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω—ã –ª–∏ –º—ã –≤ Telegram Web App
    const isInTelegramApp = window.Telegram && window.Telegram.WebApp && initData && initData.trim() !== '';
    
    if (!isInTelegramApp) {
        // –í –æ–±—ã—á–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ
        console.log('üåê –†–µ–∂–∏–º –±—Ä–∞—É–∑–µ—Ä–∞: –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
        document.getElementById('authStatus').innerHTML = `
            <div class="auth-success">
                üåê –†–µ–∂–∏–º –±—Ä–∞—É–∑–µ—Ä–∞
                <br>–ü—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ API
            </div>
        `;
        return true; // –°—á–∏—Ç–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ API
    }
    
    // –í Telegram Web App - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    try {
        const response = await fetch('/auth/status', {
            method: 'GET',
            headers: getAuthHeaders()
        });
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
        logDebugInfoWithResponse(response.status, response.statusText);
        
        if (response.ok) {
            const authData = await response.json();
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', authData);
            
            if (authData.authenticated) {
                document.getElementById('authStatus').innerHTML = `
                    <div class="auth-success">
                        ‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
                        <br>–†–æ–ª—å: ${authData.role || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}
                    </div>
                `;
                return true;
            } else {
                document.getElementById('authStatus').innerHTML = `
                    <div class="auth-error">
                        ‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${authData.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}
                    </div>
                `;
                return false;
            }
        } else {
            const errorText = await response.text();
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', response.status, errorText);
            document.getElementById('authStatus').innerHTML = `
                <div class="auth-error">
                    ‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} ${response.statusText}
                </div>
            `;
            return false;
        }
    } catch (error) {
        document.getElementById('authStatus').innerHTML = `
            <div class="auth-error">
                ‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}
            </div>
        `;
        return false;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤
async function loadStickers() {
    try {
        const loading = document.getElementById('loading');
        if (loading) {
            loading.innerHTML = '<p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤...</p>';
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω—ã –ª–∏ –º—ã –≤ Telegram Web App
        const isInTelegramApp = window.Telegram && window.Telegram.WebApp && initData;
        
        let headers = {};
        
        if (isInTelegramApp) {
            // –í Telegram Web App - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            const isAuthenticated = await checkAuthStatus();
            if (!isAuthenticated) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ Telegram Web App');
            }
            headers = getAuthHeaders();
        } else {
            // –í –æ–±—ã—á–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø
            console.log('üåê –†–∞–±–æ—Ç–∞–µ–º –≤ –æ–±—ã—á–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ –±–µ–∑ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
            headers = {
                'Content-Type': 'application/json'
            };
        }

        const response = await fetch('/api/stickersets', {
            method: 'GET',
            headers: headers
        });

        if (response.ok) {
            const data = await response.json();
            console.log('üì° API –æ—Ç–≤–µ—Ç:', data);
            displayStickers(data);
        } else {
            const errorText = await response.text();
            console.error('‚ùå –û—à–∏–±–∫–∞ API:', response.status, response.statusText, errorText);
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤:', error);
        document.getElementById('content').innerHTML = `
            <div class="error">
                <p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤: ${error.message}</p>
                <button class="btn btn-primary" onclick="loadStickers()">–ü–æ–≤—Ç–æ—Ä–∏—Ç—å</button>
            </div>
        `;
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–æ–≤
function displayStickers(response) {
    const content = document.getElementById('content');
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    let stickers = [];
    if (response && response.content && Array.isArray(response.content)) {
        stickers = response.content;
    } else if (Array.isArray(response)) {
        // Fallback –¥–ª—è –ø—Ä—è–º–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
        stickers = response;
    }
    
    console.log('üìã –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—ã:', stickers);
    
    if (!stickers || stickers.length === 0) {
        content.innerHTML = `
            <div class="empty-state">
                <h3>üé® –°—Ç–∏–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤ —Å—Ç–∏–∫–µ—Ä–æ–≤</p>
                <button class="btn btn-primary" onclick="tg.openTelegramLink('https://t.me/StickerGalleryBot')">
                    –°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä
                </button>
            </div>
        `;
        return;
    }

    content.innerHTML = '';

    const stickersHtml = stickers.map(sticker => {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ 4 —Å—Ç–∏–∫–µ—Ä–∞ –¥–ª—è –ø—Ä–µ–≤—å—é
        const previewStickers = getStickerPreviews(sticker);
        const previewHtml = generatePreviewHtml(previewStickers);
        
        return `
        <div class="sticker-card" data-title="${sticker.title.toLowerCase()}">
            <div class="sticker-header">
                <h3>${sticker.title}</h3>
                <span class="sticker-count">${getStickerCount(sticker)} —Å—Ç–∏–∫–µ—Ä–æ–≤</span>
            </div>
            
            <!-- –ü—Ä–µ–≤—å—é —Å—Ç–∏–∫–µ—Ä–æ–≤ -->
            <div class="sticker-preview-grid">
                ${previewHtml}
            </div>
            
            <div class="sticker-info">
                <p class="sticker-date">–°–æ–∑–¥–∞–Ω: ${new Date(sticker.createdAt).toLocaleDateString()}</p>
            </div>
            
            <div class="sticker-actions">
                <button class="btn btn-primary" onclick="viewStickerSet('${sticker.id}', '${sticker.name}')">
                    üì± –ü—Ä–æ—Å–º–æ—Ç—Ä
                </button>
                <button class="btn btn-secondary" onclick="shareStickerSet('${sticker.name}', '${sticker.title}')">
                    üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
                </button>
                <button class="btn btn-danger" onclick="deleteStickerSet('${sticker.id}', '${sticker.title}')">
                    üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                </button>
            </div>
        </div>
        `;
    }).join('');

    content.innerHTML = stickersHtml;
    
           // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º lazy loading –¥–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–µ–≤—å—é
           initializeLazyLoading();
           
           // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ (–æ—Ç–ª–∞–¥–∫–∞)
           const debugButton = document.createElement('button');
           debugButton.textContent = 'üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π';
           debugButton.style.cssText = 'margin: 10px; padding: 8px; background: #007aff; color: white; border: none; border-radius: 4px; cursor: pointer;';
           debugButton.onclick = () => {
               console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
               const lazyImages = document.querySelectorAll('.preview-image.lazy');
               lazyImages.forEach(img => {
                   if (img.dataset.src && !img.src) {
                       console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º:', img.dataset.src);
                       img.src = img.dataset.src;
                       img.classList.remove('lazy');
                   }
               });
           };
           content.appendChild(debugButton);
}

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (fallback)
function forceLoadAllImages() {
    const lazyImages = document.querySelectorAll('.preview-image.lazy');
    
    lazyImages.forEach(img => {
        if (img.dataset.src && !img.src) {
            img.src = img.dataset.src;
            img.classList.remove('lazy');
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ lazy loading –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
function initializeLazyLoading() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É IntersectionObserver
    if ('IntersectionObserver' in window) {
        const lazyImageObserver = new IntersectionObserver((entries, observer) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const img = entry.target;
                    if (img.dataset.src && !img.src) {
                        console.log('üñºÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', img.dataset.src);
                        img.src = img.dataset.src;
                        img.classList.remove('lazy');
                        observer.unobserve(img);
                    }
                }
            });
        }, {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞—Ä–∞–Ω–µ–µ (–∑–∞ 200px –¥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏)
            rootMargin: '200px 0px'
        });

        // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –≤—Å–µ–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —Å –∫–ª–∞—Å—Å–æ–º lazy
        const lazyImages = document.querySelectorAll('.preview-image.lazy');
        lazyImages.forEach(img => {
            lazyImageObserver.observe(img);
        });
        
        console.log(`üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω lazy loading –¥–ª—è ${lazyImages.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
    } else {
        // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ - –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ä–∞–∑—É
        console.log('‚ö†Ô∏è IntersectionObserver –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        forceLoadAllImages();
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–µ–≤—å—é —Å—Ç–∏–∫–µ—Ä–æ–≤
function getStickerPreviews(stickerSet) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ telegramStickerSetInfo –∏ stickers
        if (!stickerSet || !stickerSet.telegramStickerSetInfo || !stickerSet.telegramStickerSetInfo.stickers) {
            console.log('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö stickers –¥–ª—è —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞:', stickerSet?.title || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
            return [];
        }
        
        // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 4 —Å—Ç–∏–∫–µ—Ä–∞
        return stickerSet.telegramStickerSetInfo.stickers.slice(0, 4);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–≤—å—é –¥–ª—è —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞:', stickerSet?.title, error);
        return [];
    }
}

function getStickerCount(stickerSet) {
    try {
        if (!stickerSet || !stickerSet.telegramStickerSetInfo || !stickerSet.telegramStickerSetInfo.stickers) {
            return 0;
        }
        return stickerSet.telegramStickerSetInfo.stickers.length;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —Å—Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞:', stickerSet?.title, error);
        return 0;
    }
}

function generatePreviewHtml(previewStickers) {
    if (previewStickers.length === 0) {
        return `
            <div class="preview-placeholder">
                <div class="placeholder-item">üé®</div>
                <div class="placeholder-item">üñºÔ∏è</div>
                <div class="placeholder-item">‚ú®</div>
                <div class="placeholder-item">üé≠</div>
            </div>
        `;
    }
    
    let html = '';
    // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 4 —è—á–µ–π–∫–∏ (–∑–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–º–∏ –µ—Å–ª–∏ –º–µ–Ω—å—à–µ —Å—Ç–∏–∫–µ—Ä–æ–≤)
    for (let i = 0; i < 4; i++) {
        if (i < previewStickers.length) {
            const sticker = previewStickers[i];
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º thumbnail –¥–ª—è –ø—Ä–µ–≤—å—é (–º–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä)
            const fileId = sticker.thumbnail ? sticker.thumbnail.file_id : sticker.file_id;
            const emoji = sticker.emoji || 'üé®';
            const isAnimated = sticker.is_animated;
            
            html += `
                <div class="preview-item" data-file-id="${fileId}">
                    <div class="preview-placeholder">${emoji}</div>
                    <img class="preview-image lazy" 
                         data-src="/stickers/${fileId}" 
                         alt="${emoji}"
                         title="${emoji}${isAnimated ? ' (–∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)' : ''}"
                         onerror="console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', this.src, 'Status:', this.naturalWidth, 'x', this.naturalHeight); this.style.display='none'; this.parentElement.querySelector('.preview-placeholder').style.display='flex'"
                         onload="console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', this.src, 'Size:', this.naturalWidth, 'x', this.naturalHeight, 'Type:', this.complete); this.style.display='block'; this.parentElement.querySelector('.preview-placeholder').style.display='none'">
                    ${isAnimated ? '<div class="animated-badge">GIF</div>' : ''}
                    <div class="debug-url">${window.location.origin}/stickers/${fileId}</div>
                </div>
            `;
        } else {
            // –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞
            html += `
                <div class="preview-item empty">
                    <div class="preview-placeholder">‚ûï</div>
                </div>
            `;
        }
    }
    
    return html;
}

// Lazy loading –¥–ª—è –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
function initializeLazyLoading() {
    const lazyImages = document.querySelectorAll('.preview-image.lazy');
    
    if ('IntersectionObserver' in window) {
        const imageObserver = new IntersectionObserver((entries, observer) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const img = entry.target;
                    console.log('üñºÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', img.dataset.src);
                    console.log('üñºÔ∏è –ü–æ–ª–Ω—ã–π URL:', window.location.origin + img.dataset.src);
                    img.src = img.dataset.src;
                    img.classList.remove('lazy');
                    observer.unobserve(img);
                }
            });
        }, {
            rootMargin: '200px 0px'
        });
        
        lazyImages.forEach(img => imageObserver.observe(img));
    } else {
        // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ - –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ä–∞–∑—É
        lazyImages.forEach(img => {
            img.src = img.dataset.src;
            img.classList.remove('lazy');
        });
    }
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞
function viewStickerSet(stickerSetId, stickerSetName) {
    console.log('üîç –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞:', stickerSetId, stickerSetName);
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    // –ü–æ–∫–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ Telegram
    tg.openTelegramLink(`https://t.me/addstickers/${stickerSetName}`);
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∏–∫–µ—Ä–æ–≤
function filterStickers() {
    const searchInput = document.getElementById('searchInput');
    const searchTerm = searchInput.value.toLowerCase();
    const stickerCards = document.querySelectorAll('.sticker-card');

    stickerCards.forEach(card => {
        const title = card.getAttribute('data-title');
        if (title.includes(searchTerm)) {
            card.style.display = 'block';
        } else {
            card.style.display = 'none';
        }
    });
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞–±–æ—Ä–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤
function openStickerSet(stickerSetName) {
    tg.openTelegramLink(`https://t.me/addstickers/${stickerSetName}`);
}

// –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–∞–±–æ—Ä–æ–º —Å—Ç–∏–∫–µ—Ä–æ–≤
function shareStickerSet(stickerSetName, title) {
    tg.openTelegramLink(`https://t.me/addstickers/${stickerSetName}`);
}

// –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤
async function deleteStickerSet(id, title) {
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–∞–±–æ—Ä —Å—Ç–∏–∫–µ—Ä–æ–≤ "${title}"?`)) {
        return;
    }

    try {
        const response = await fetch(`/api/stickersets/${id}`, {
            method: 'DELETE',
            headers: getAuthHeaders()
        });

        if (response.ok) {
            loadStickers(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
        } else {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞:', error);
        alert(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞: ${error.message}`);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –≤–µ—Ä—Å–∏–π)
if (tg.BackButton && typeof tg.BackButton.onClick === 'function') {
    tg.BackButton.onClick(() => {
        tg.close();
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    if (typeof tg.BackButton.show === 'function') {
        tg.BackButton.show();
    }
} else {
    console.log('BackButton –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ Telegram Web App');
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
if (user) {
    document.getElementById('userInfo').innerHTML = `
        <p>–ü—Ä–∏–≤–µ—Ç, <strong>${user.first_name}${user.last_name ? ' ' + user.last_name : ''}</strong>!</p>
        <p>ID: <strong>${user.id}</strong></p>
        ${user.username ? `<p>Username: <strong>@${user.username}</strong></p>` : ''}
    `;
} else {
    document.getElementById('userInfo').innerHTML = `
        <p>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω</p>
    `;
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∏–∫–µ—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    updateDebugInfo();
    loadStickers();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
window.addEventListener('error', (event) => {
    console.error('–û—à–∏–±–∫–∞:', event.error);
});