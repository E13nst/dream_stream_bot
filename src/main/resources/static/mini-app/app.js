// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
const tg = window.Telegram.WebApp;
tg.expand();
tg.ready();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
document.documentElement.style.setProperty('--tg-theme-bg-color', tg.themeParams.bg_color || '#ffffff');
document.documentElement.style.setProperty('--tg-theme-text-color', tg.themeParams.text_color || '#000000');
document.documentElement.style.setProperty('--tg-theme-hint-color', tg.themeParams.hint_color || '#999999');
document.documentElement.style.setProperty('--tg-theme-button-color', tg.themeParams.button_color || '#2481cc');
document.documentElement.style.setProperty('--tg-theme-button-text-color', tg.themeParams.button_text_color || '#ffffff');
document.documentElement.style.setProperty('--tg-theme-secondary-bg-color', tg.themeParams.secondary_bg_color || '#f8f9fa');

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
const user = tg.initDataUnsafe?.user;
const userId = user?.id;
const initData = tg.initData;

// –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
console.log('üîç Telegram Web App –¥–∞–Ω–Ω—ã–µ:');
console.log('tg.initData:', initData ? 'present (' + initData.length + ' chars)' : 'null');
console.log('tg.initDataUnsafe:', tg.initDataUnsafe);
console.log('user:', user);
console.log('platform:', tg.platform);
console.log('version:', tg.version);

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
if (user) {
    document.getElementById('userInfo').innerHTML = `
        <p>–ü—Ä–∏–≤–µ—Ç, <strong>${user.first_name}${user.last_name ? ' ' + user.last_name : ''}</strong>!</p>
        <p>ID: <strong>${user.id}</strong></p>
        ${user.username ? `<p>Username: <strong>@${user.username}</strong></p>` : ''}
    `;
} else {
    document.getElementById('userInfo').innerHTML = `
        <p>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω</p>
    `;
}

// API –±–∞–∑–æ–≤—ã–π URL
const API_BASE = '/api/stickersets';
const AUTH_BASE = '/auth';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
function getAuthHeaders() {
    console.log('üîç –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:');
    console.log('initData:', initData ? 'present (' + initData.length + ' chars)' : 'null');
    console.log('User ID:', user?.id);
    
    const headers = {
        'Content-Type': 'application/json',
        'X-Telegram-Init-Data': initData,
        'X-Telegram-Bot-Name': 'StickerGallery'
    };
    
    console.log('üîç –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞:', {
        'Content-Type': headers['Content-Type'],
        'X-Telegram-Init-Data': headers['X-Telegram-Init-Data'] ? 'present' : 'null',
        'X-Telegram-Bot-Name': headers['X-Telegram-Bot-Name']
    });
    
    return headers;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
async function checkAuthStatus() {
    try {
        const authStatusElement = document.getElementById('authStatus');
        authStatusElement.innerHTML = '<p>üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...</p>';
        authStatusElement.className = 'auth-status';

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ initData
        if (!initData || initData.trim() === '') {
            console.error('‚ùå InitData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–∞—è');
            authStatusElement.innerHTML = `
                <p>‚ùå –û—à–∏–±–∫–∞: InitData –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç Telegram</p>
                <p>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞</p>
            `;
            authStatusElement.className = 'auth-status error';
            return false;
        }

        console.log('‚úÖ InitData –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
        const response = await fetch(`${AUTH_BASE}/status`, {
            method: 'GET',
            headers: getAuthHeaders()
        });

        const authData = await response.json();
        
        if (authData.authenticated) {
            authStatusElement.innerHTML = `
                <p>‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞</p>
                <p>–†–æ–ª—å: <strong>${authData.role || 'USER'}</strong></p>
            `;
            authStatusElement.className = 'auth-status authenticated';
            return true;
        } else {
            authStatusElement.innerHTML = `
                <p>‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${authData.message}</p>
            `;
            authStatusElement.className = 'auth-status error';
            return false;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        const authStatusElement = document.getElementById('authStatus');
        authStatusElement.innerHTML = `
            <p>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error.message}</p>
        `;
        authStatusElement.className = 'auth-status error';
        return false;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤
async function loadStickers() {
    try {
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ loading —ç–ª–µ–º–µ–Ω—Ç–∞
        const loading = document.getElementById('loading');
        if (loading) {
            loading.innerHTML = '<p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤...</p>';
        }

        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        const isAuthenticated = await checkAuthStatus();
        if (!isAuthenticated) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        }

        const response = await fetch(API_BASE, {
            method: 'GET',
            headers: getAuthHeaders()
        });

        if (response.ok) {
            const stickers = await response.json();
            displayStickers(stickers);
        } else if (response.status === 401) {
            throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
        } else if (response.status === 403) {
            throw new Error('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
        } else {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤:', error);
        document.getElementById('content').innerHTML = `
            <div class="error">
                <p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤: ${error.message}</p>
                <button class="btn btn-primary" onclick="loadStickers()">–ü–æ–≤—Ç–æ—Ä–∏—Ç—å</button>
            </div>
        `;
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–æ–≤
function displayStickers(stickers) {
    const content = document.getElementById('content');

    if (!stickers || stickers.length === 0) {
        content.innerHTML = `
            <div class="empty-state">
                <h3>üé® –°—Ç–∏–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤ —Å—Ç–∏–∫–µ—Ä–æ–≤</p>
                <button class="btn btn-primary" onclick="tg.openTelegramLink('https://t.me/StickerGalleryBot')">
                    –°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä
                </button>
            </div>
        `;
        return;
    }

    const stickersHtml = stickers.map(sticker => `
        <div class="sticker-card" data-title="${sticker.title.toLowerCase()}">
            <h3>${sticker.title}</h3>
            <p>ID: ${sticker.id}</p>
            <p>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${sticker.userId}</p>
            <p>–°–æ–∑–¥–∞–Ω: ${new Date(sticker.createdAt).toLocaleDateString()}</p>
            <div class="sticker-actions">
                <button class="btn btn-primary" onclick="openStickerSet('${sticker.name}')">
                    –û—Ç–∫—Ä—ã—Ç—å
                </button>
                <button class="btn btn-secondary" onclick="shareStickerSet('${sticker.name}', '${sticker.title}')">
                    –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
                </button>
                <button class="btn btn-danger" onclick="deleteStickerSet(${sticker.id}, '${sticker.title}')">
                    –£–¥–∞–ª–∏—Ç—å
                </button>
            </div>
        </div>
    `).join('');

    content.innerHTML = `
        <div class="sticker-grid" id="stickerGrid">
            ${stickersHtml}
        </div>
    `;
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∏–∫–µ—Ä–æ–≤
function filterStickers() {
    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
    const stickerCards = document.querySelectorAll('.sticker-card');

    stickerCards.forEach(card => {
        const title = card.getAttribute('data-title');
        if (title.includes(searchTerm)) {
            card.style.display = 'block';
        } else {
            card.style.display = 'none';
        }
    });
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞–±–æ—Ä–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤ Telegram
function openStickerSet(stickerSetName) {
    const url = `https://t.me/addstickers/${stickerSetName}`;
    tg.openTelegramLink(url);
}

// –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–∞–±–æ—Ä–æ–º —Å—Ç–∏–∫–µ—Ä–æ–≤
function shareStickerSet(stickerSetName, title) {
    const shareText = `üé® –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –º–æ–π –Ω–∞–±–æ—Ä —Å—Ç–∏–∫–µ—Ä–æ–≤ "${title}": https://t.me/addstickers/${stickerSetName}`;
    tg.shareUrl(shareText, `https://t.me/addstickers/${stickerSetName}`);
}

// –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤
async function deleteStickerSet(id, title) {
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–∞–±–æ—Ä —Å—Ç–∏–∫–µ—Ä–æ–≤ "${title}"?`)) {
        return;
    }

    try {
        const response = await fetch(`${API_BASE}/${id}`, {
            method: 'DELETE',
            headers: getAuthHeaders()
        });

        if (response.ok) {
            tg.showAlert(`–ù–∞–±–æ—Ä —Å—Ç–∏–∫–µ—Ä–æ–≤ "${title}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`);
            loadStickers(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
        } else {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
        tg.showAlert(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${error.message}`);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
function showDebugInfo() {
    const debugInfo = document.getElementById('debugInfo');
    const debugContent = document.getElementById('debugContent');
    
    const debugData = {
        user: user,
        userId: userId,
        initData: initData,
        initDataLength: initData ? initData.length : 0,
        themeParams: tg.themeParams,
        platform: tg.platform,
        version: tg.version,
        colorScheme: tg.colorScheme
    };
    
    debugContent.textContent = JSON.stringify(debugData, null, 2);
    debugInfo.style.display = 'block';
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
tg.BackButton.onClick(() => {
    tg.close();
});

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
tg.BackButton.show();

// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –≤ dev —Ä–µ–∂–∏–º–µ)
if (tg.initDataUnsafe?.query_id) {
    const debugButton = document.createElement('button');
    debugButton.textContent = 'üêõ Debug';
    debugButton.className = 'btn btn-secondary';
    debugButton.style.position = 'fixed';
    debugButton.style.bottom = '20px';
    debugButton.style.right = '20px';
    debugButton.style.zIndex = '1000';
    debugButton.onclick = showDebugInfo;
    document.body.appendChild(debugButton);
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∏–∫–µ—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    console.log('Telegram Web App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    console.log('User:', user);
    console.log('InitData length:', initData ? initData.length : 0);
    loadStickers();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
window.addEventListener('error', (event) => {
    console.error('–û—à–∏–±–∫–∞:', event.error);
    tg.showAlert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏');
});