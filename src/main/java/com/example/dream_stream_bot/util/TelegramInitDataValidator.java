package com.example.dream_stream_bot.util;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.example.dream_stream_bot.model.telegram.BotEntity;
import com.example.dream_stream_bot.service.telegram.BotService;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.nio.charset.StandardCharsets;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.time.Instant;
import java.util.Arrays;
import java.util.Map;
import java.util.TreeMap;
import java.util.stream.Collectors;

@Component
public class TelegramInitDataValidator {

    private static final Logger LOGGER = LoggerFactory.getLogger(TelegramInitDataValidator.class);
    private static final String HMAC_SHA256 = "HmacSHA256";
    private static final long MAX_AUTH_AGE_SECONDS = 86400; // 24 —á–∞—Å–∞ –∫–∞–∫ –≤ JavaScript –∫–æ–¥–µ

    private final BotService botService;

    @Autowired
    public TelegramInitDataValidator(BotService botService) {
        this.botService = botService;
    }

    public boolean validateInitData(String initData, String botName) {
        LOGGER.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é initData –¥–ª—è –±–æ—Ç–∞: {}", botName);
        
        if (initData == null || initData.trim().isEmpty()) {
            LOGGER.warn("‚ùå InitData –ø—É—Å—Ç–∞—è –∏–ª–∏ null");
            return false;
        }
        
        if (botName == null || botName.trim().isEmpty()) {
            LOGGER.warn("‚ùå –ò–º—è –±–æ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ");
            return false;
        }
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            String botToken = getBotToken(botName);
            if (botToken == null) {
                LOGGER.warn("‚ùå –¢–æ–∫–µ–Ω –¥–ª—è –±–æ—Ç–∞ '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω", botName);
                return false;
            }
            LOGGER.debug("‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –ø–æ–ª—É—á–µ–Ω (–¥–ª–∏–Ω–∞: {})", botToken.length());
            
            // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            LOGGER.debug("–ü–æ–ª–Ω—ã–π initData: {}", initData);
            
            // –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            Map<String, String> params = parseInitData(initData);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if (!params.containsKey("auth_date")) {
                LOGGER.warn("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ auth_date");
                return false;
            }
            
            String hash = params.get("hash");
            String signature = params.get("signature");
            String authDateStr = params.get("auth_date");
            
            if (hash == null && signature == null) {
                LOGGER.warn("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è –ø–æ–¥–ø–∏—Å–∏ (hash –∏–ª–∏ signature)");
                return false;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è auth_date
            if (!validateAuthDate(authDateStr)) {
                LOGGER.warn("‚ùå Auth date —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è: {}", authDateStr);
                return false;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞)
            boolean signatureValid = false;
            if (hash != null) {
                signatureValid = validateHash(params, hash, botToken);
                if (!signatureValid) {
                    LOGGER.warn("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å hash –¥–ª—è –±–æ—Ç–∞ '{}'", botName);
                }
            } else if (signature != null) {
                signatureValid = validateSignature(params, signature, botToken);
                if (!signatureValid) {
                    LOGGER.warn("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å signature –¥–ª—è –±–æ—Ç–∞ '{}'", botName);
                }
            }
            
            if (signatureValid) {
                LOGGER.info("‚úÖ InitData –≤–∞–ª–∏–¥–Ω–∞ –¥–ª—è –±–æ—Ç–∞ '{}'", botName);
            }
            
            return signatureValid;
            
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ initData –¥–ª—è –±–æ—Ç–∞ '{}': {}", botName, e.getMessage(), e);
            return false;
        }
    }

    private String getBotToken(String botName) {
        try {
            var bots = botService.findAll();
            return bots.stream()
                    .filter(bot -> botName.equals(bot.getName()))
                    .findFirst()
                    .map(BotEntity::getToken)
                    .orElse(null);
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ '{}': {}", botName, e.getMessage(), e);
            return null;
        }
    }

    private Map<String, String> parseInitData(String initData) {
        LOGGER.debug("üîç –ü–∞—Ä—Å–∏–º initData: {}", initData);
        
        Map<String, String> params = Arrays.stream(initData.split("&"))
                .map(param -> param.split("=", 2))
                .filter(parts -> parts.length == 2)
                .collect(Collectors.toMap(
                        parts -> parts[0],
                        parts -> {
                            try {
                                // URL-–¥–µ–∫–æ–¥–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                                String decodedValue = java.net.URLDecoder.decode(parts[1], StandardCharsets.UTF_8);
                                LOGGER.debug("üîç –ü–∞—Ä–∞–º–µ—Ç—Ä {}: '{}' -> '{}'", parts[0], parts[1], decodedValue);
                                return decodedValue;
                            } catch (Exception e) {
                                LOGGER.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ URL-–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {}: {}", parts[0], e.getMessage());
                                return parts[1]; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –µ—Å–ª–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
                            }
                        },
                        (existing, replacement) -> existing,
                        TreeMap::new
                ));
        
        LOGGER.debug("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞: {}", params);
        return params;
    }

    private boolean validateAuthDate(String authDateStr) {
        try {
            long authDate = Long.parseLong(authDateStr);
            long currentTime = Instant.now().getEpochSecond();
            long age = currentTime - authDate;
            return age <= MAX_AUTH_AGE_SECONDS;
        } catch (NumberFormatException e) {
            LOGGER.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç auth_date: {}", authDateStr);
            return false;
        }
    }

    /**
     * –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ dataCheckString —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Telegram
     * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
     */
    private String buildDataCheckString(Map<String, String> params) {
        return params.entrySet().stream()
                .filter(entry -> !"hash".equals(entry.getKey()))  // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ hash
                .sorted(Map.Entry.comparingByKey())  // –õ–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
                .map(entry -> entry.getKey() + "=" + entry.getValue())
                .collect(Collectors.joining("\n"));
    }

    /**
     * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è validateHash –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É JavaScript
     */
    private boolean validateHash(Map<String, String> params, String expectedHash, String botToken) {
        try {
            LOGGER.debug("üîç –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é hash –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É JavaScript");
            LOGGER.debug("üîç –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {}", params);
            LOGGER.debug("üîç –û–∂–∏–¥–∞–µ–º—ã–π hash: {}", expectedHash);
            LOGGER.debug("üîç –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–ø–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤): {}", botToken.substring(0, Math.min(10, botToken.length())));
            
            // –°–æ–∑–¥–∞—ë–º –º–∞—Å—Å–∏–≤ –ø–∞—Ä –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ, –∏—Å–∫–ª—é—á–∞—è –ø–∞—Ä–∞–º–µ—Ç—Ä 'hash'
            java.util.List<String> dataCheckEntries = new java.util.ArrayList<>();
            for (Map.Entry<String, String> entry : params.entrySet()) {
                if (!"hash".equals(entry.getKey())) {
                    String key = entry.getKey();
                    String value = entry.getValue();
                    LOGGER.debug("üîç –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä: {}={}", key, value);
                    dataCheckEntries.add(key + "=" + value);
                }
            }
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—ã –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –ø–æ –∫–ª—é—á—É
            dataCheckEntries.sort(String::compareTo);
            LOGGER.debug("üîç –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {}", dataCheckEntries);
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            String dataCheckString = String.join("\n", dataCheckEntries);
            LOGGER.debug("üîç Data check string: {}", dataCheckString.replace("\n", "\\n"));
            
            // –°–æ–∑–¥–∞—ë–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á: HMAC-SHA256 –æ—Ç botToken —Å –∫–ª—é—á–æ–º "WebAppData"
            Mac mac = Mac.getInstance(HMAC_SHA256);
            SecretKeySpec botTokenKeySpec = new SecretKeySpec("WebAppData".getBytes(StandardCharsets.UTF_8), HMAC_SHA256);
            mac.init(botTokenKeySpec);
            byte[] secretKey = mac.doFinal(botToken.getBytes(StandardCharsets.UTF_8));
            LOGGER.debug("üîç –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á —Å–æ–∑–¥–∞–Ω (–¥–ª–∏–Ω–∞: {} –±–∞–π—Ç)", secretKey.length);
            
            // –í—ã—á–∏—Å–ª—è–µ–º HMAC-SHA256 –¥–ª—è dataCheckString —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
            mac = Mac.getInstance(HMAC_SHA256);
            SecretKeySpec secretKeySpec = new SecretKeySpec(secretKey, HMAC_SHA256);
            mac.init(secretKeySpec);
            byte[] hashBytes = mac.doFinal(dataCheckString.getBytes(StandardCharsets.UTF_8));
            
            String calculatedHash = bytesToHex(hashBytes);
            LOGGER.debug("üîç –í—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π hash: {}", calculatedHash);
            LOGGER.debug("üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ö–µ—à–µ–π: –æ–∂–∏–¥–∞–µ–º—ã–π={}, –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π={}", expectedHash, calculatedHash);
            
            boolean isValid = calculatedHash.equals(expectedHash);
            LOGGER.debug("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ hash: {}", isValid ? "‚úÖ –í–∞–ª–∏–¥–µ–Ω" : "‚ùå –ù–µ–≤–∞–ª–∏–¥–µ–Ω");
            
            return isValid;

        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ hash: {}", e.getMessage(), e);
            return false;
        }
    }

    /**
     * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è validateSignature
     */
    private boolean validateSignature(Map<String, String> params, String expectedSignature, String botToken) {
        try {
            String dataCheckString = buildDataCheckString(params);
            
            LOGGER.debug("Data check string –¥–ª—è signature: {}", dataCheckString);
            
            // –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á (botToken –∫–∞–∫ –∫–ª—é—á, "WebAppData" –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ)
            Mac hmacSha256 = Mac.getInstance(HMAC_SHA256);
            SecretKeySpec botTokenKeySpec = new SecretKeySpec(botToken.getBytes(StandardCharsets.UTF_8), HMAC_SHA256);
            hmacSha256.init(botTokenKeySpec);
            byte[] secretKey = hmacSha256.doFinal("WebAppData".getBytes(StandardCharsets.UTF_8));
            
            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            hmacSha256 = Mac.getInstance(HMAC_SHA256);
            SecretKeySpec dataKeySpec = new SecretKeySpec(secretKey, HMAC_SHA256);
            hmacSha256.init(dataKeySpec);
            byte[] signatureBytes = hmacSha256.doFinal(dataCheckString.getBytes(StandardCharsets.UTF_8));
            
            // –¢–æ–ª—å–∫–æ URL-safe Base64 –±–µ–∑ padding
            String calculatedSignature = java.util.Base64.getUrlEncoder().withoutPadding().encodeToString(signatureBytes);
            
            LOGGER.debug("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ signature: –æ–∂–∏–¥–∞–µ–º—ã–π={}, –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π={}", expectedSignature, calculatedSignature);
            
            return calculatedSignature.equals(expectedSignature);
            
        } catch (NoSuchAlgorithmException | InvalidKeyException e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è signature: {}", e.getMessage(), e);
            return false;
        }
    }

    private String bytesToHex(byte[] bytes) {
        StringBuilder result = new StringBuilder();
        for (byte b : bytes) {
            result.append(String.format("%02x", b));
        }
        return result.toString();
    }

    public Long extractTelegramId(String initData) {
        try {
            Map<String, String> params = parseInitData(initData);
            String userStr = params.get("user");

            if (userStr != null) {
                // –î–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å JSON –ø–∞—Ä—Å–µ—Ä
                int idIndex = userStr.indexOf("\"id\":");
                if (idIndex != -1) {
                    int start = userStr.indexOf(":", idIndex) + 1;
                    int end = userStr.indexOf(",", start);
                    if (end == -1) end = userStr.indexOf("}", start);
                    if (end != -1) {
                        String idStr = userStr.substring(start, end).trim();
                        return Long.parseLong(idStr.replaceAll("\"", ""));
                    }
                }
            }

            return null;

        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è telegram_id: {}", e.getMessage(), e);
            return null;
        }
    }
}