package com.example.dream_stream_bot.util;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.example.dream_stream_bot.model.telegram.BotEntity;
import com.example.dream_stream_bot.service.telegram.BotService;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.nio.charset.StandardCharsets;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.time.Instant;
import java.util.Arrays;
import java.util.Map;
import java.util.TreeMap;
import java.util.stream.Collectors;

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Telegram Web App initData
 */
@Component
public class TelegramInitDataValidator {
    
    private static final Logger LOGGER = LoggerFactory.getLogger(TelegramInitDataValidator.class);
    private static final String HMAC_SHA256 = "HmacSHA256";
    private static final long MAX_AUTH_AGE_SECONDS = 600; // 10 –º–∏–Ω—É—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    
    private final BotService botService;
    
    @Autowired
    public TelegramInitDataValidator(BotService botService) {
        this.botService = botService;
    }
    
    /**
     * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç Telegram initData –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
     * 
     * @param initData —Å—Ç—Ä–æ–∫–∞ initData –æ—Ç Telegram Web App
     * @param botName –∏–º—è –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
     * @return true –µ—Å–ª–∏ –≤–∞–ª–∏–¥–Ω–∞, false –∏–Ω–∞—á–µ
     */
    public boolean validateInitData(String initData, String botName) {
        LOGGER.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é initData –¥–ª—è –±–æ—Ç–∞: {}", botName);
        LOGGER.debug("üîç InitData (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤): {}", 
                initData != null && initData.length() > 100 ? initData.substring(0, 100) + "..." : initData);
        
        if (initData == null || initData.trim().isEmpty()) {
            LOGGER.warn("‚ùå InitData –ø—É—Å—Ç–∞—è –∏–ª–∏ null");
            return false;
        }
        
        if (botName == null || botName.trim().isEmpty()) {
            LOGGER.warn("‚ùå –ò–º—è –±–æ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ");
            return false;
        }
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            LOGGER.debug("üîç –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö");
            String botToken = getBotToken(botName);
            if (botToken == null) {
                LOGGER.warn("‚ùå –¢–æ–∫–µ–Ω –¥–ª—è –±–æ—Ç–∞ '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω", botName);
                return false;
            }
            LOGGER.debug("‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –ø–æ–ª—É—á–µ–Ω (–¥–ª–∏–Ω–∞: {})", botToken.length());
            
            // –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            LOGGER.debug("üîç –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã initData");
            Map<String, String> params = parseInitData(initData);
            LOGGER.debug("üîç –ü–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {}", params.keySet());
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ hash, —Ç–∞–∫ –∏ signature)
            if (!params.containsKey("auth_date")) {
                LOGGER.warn("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ auth_date");
                LOGGER.debug("üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è: {}", params.keySet());
                return false;
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∏ (—Å—Ç–∞—Ä—ã–π hash –∏–ª–∏ –Ω–æ–≤—ã–π signature)
                            String hash = params.get("hash");
                String signature = params.get("signature");
                String authDateStr = params.get("auth_date");
                
                if (hash == null && signature == null) {
                    LOGGER.warn("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è –ø–æ–¥–ø–∏—Å–∏ (hash –∏–ª–∏ signature)");
                    LOGGER.debug("üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è: {}", params.keySet());
                    return false;
                }
                
                // –ü–†–ò–û–†–ò–¢–ï–¢: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º hash (–¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –±–æ—Ç–∞), –ø–æ—Ç–æ–º signature (–¥–ª—è —Ç—Ä–µ—Ç—å–∏—Ö —Å—Ç–æ—Ä–æ–Ω)
                if (hash != null) {
                    LOGGER.debug("üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º hash (–¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –±–æ—Ç–∞): {} | AuthDate: {}", hash, authDateStr);
                } else if (signature != null) {
                    LOGGER.debug("üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º signature (–¥–ª—è —Ç—Ä–µ—Ç—å–∏—Ö —Å—Ç–æ—Ä–æ–Ω): {} | AuthDate: {}", signature, authDateStr);
                }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è auth_date
            LOGGER.debug("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è auth_date");
            if (!validateAuthDate(authDateStr)) {
                LOGGER.warn("‚ùå Auth date —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è: {}", authDateStr);
                return false;
            }
            LOGGER.debug("‚úÖ Auth date –≤–∞–ª–∏–¥–Ω–∞");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞)
                            boolean signatureValid = false;
                // –ü–†–ò–û–†–ò–¢–ï–¢: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º hash (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –±–æ—Ç–∞)
                if (hash != null) {
                    LOGGER.debug("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å hash (–¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –±–æ—Ç–∞)");
                    signatureValid = validateHash(params, hash, botToken);
                    if (!signatureValid) {
                        LOGGER.warn("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å hash –¥–ª—è –±–æ—Ç–∞ '{}'", botName);
                    }
                } else if (signature != null) {
                    LOGGER.debug("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å signature (–¥–ª—è —Ç—Ä–µ—Ç—å–∏—Ö —Å—Ç–æ—Ä–æ–Ω)");
                    signatureValid = validateSignature(params, signature, botToken);
                    if (!signatureValid) {
                        LOGGER.warn("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å signature –¥–ª—è –±–æ—Ç–∞ '{}'", botName);
                    }
                }
            
            if (!signatureValid) {
                return false;
            }
            LOGGER.debug("‚úÖ –ü–æ–¥–ø–∏—Å—å –≤–∞–ª–∏–¥–Ω–∞");
            
            LOGGER.info("‚úÖ InitData –≤–∞–ª–∏–¥–Ω–∞ –¥–ª—è –±–æ—Ç–∞ '{}'", botName);
            return true;
            
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ initData –¥–ª—è –±–æ—Ç–∞ '{}': {}", botName, e.getMessage(), e);
            return false;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    private String getBotToken(String botName) {
        try {
            var bots = botService.findAll();
            return bots.stream()
                    .filter(bot -> botName.equals(bot.getName()))
                    .findFirst()
                    .map(BotEntity::getToken)
                    .orElse(null);
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ '{}': {}", botName, e.getMessage(), e);
            return null;
        }
    }
    
    /**
     * –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É initData –≤ Map –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
     */
    private Map<String, String> parseInitData(String initData) {
        return Arrays.stream(initData.split("&"))
                .map(param -> param.split("=", 2))
                .filter(parts -> parts.length == 2)
                .collect(Collectors.toMap(
                        parts -> parts[0],
                        parts -> parts[1],
                        (existing, replacement) -> existing,
                        TreeMap::new
                ));
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è auth_date (–Ω–µ —Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã)
     */
    private boolean validateAuthDate(String authDateStr) {
        try {
            long authDate = Long.parseLong(authDateStr);
            long currentTime = Instant.now().getEpochSecond();
            long age = currentTime - authDate;
            
            return age <= MAX_AUTH_AGE_SECONDS;
        } catch (NumberFormatException e) {
            LOGGER.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç auth_date: {}", authDateStr);
            return false;
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç HMAC-SHA256 –ø–æ–¥–ø–∏—Å—å (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å hash)
     */
    private boolean validateHash(Map<String, String> params, String expectedHash, String botToken) {
        LOGGER.info("üîç –ù–ê–ß–ê–õ–û validateHash - –æ–∂–∏–¥–∞–µ–º—ã–π hash: {}", expectedHash);
        try {
            // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ (–≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫—Ä–æ–º–µ hash –∏ signature, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
            String dataCheckString = params.entrySet().stream()
                    .filter(entry -> !"hash".equals(entry.getKey()) && !"signature".equals(entry.getKey()))
                    .sorted(Map.Entry.comparingByKey())
                    .map(entry -> entry.getKey() + "=" + entry.getValue())
                    .collect(Collectors.joining("\n"));
            
            LOGGER.info("üîç Data check string –¥–ª—è hash: {}", dataCheckString);
            
            // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Telegram:
            // secret_key = HMAC-SHA256(bot_token, "WebAppData")
            // hash = HMAC-SHA256(data_check_string, secret_key)
            
            // –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
            Mac mac = Mac.getInstance(HMAC_SHA256);
            SecretKeySpec webAppDataKeySpec = new SecretKeySpec("WebAppData".getBytes(StandardCharsets.UTF_8), HMAC_SHA256);
            mac.init(webAppDataKeySpec);
            byte[] secretKey = mac.doFinal(botToken.getBytes(StandardCharsets.UTF_8));
            
            // –®–∞–≥ 2: –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–º –∫–ª—é—á–æ–º
            mac = Mac.getInstance(HMAC_SHA256);
            SecretKeySpec dataKeySpec = new SecretKeySpec(secretKey, HMAC_SHA256);
            mac.init(dataKeySpec);
            byte[] hashBytes = mac.doFinal(dataCheckString.getBytes(StandardCharsets.UTF_8));
            String calculatedHash = bytesToHex(hashBytes);
            
            LOGGER.debug("üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ö–µ—à–µ–π: –æ–∂–∏–¥–∞–µ–º—ã–π={}, –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π={}", expectedHash, calculatedHash);
            
            return calculatedHash.equals(expectedHash);
            
        } catch (NoSuchAlgorithmException | InvalidKeyException e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è HMAC: {}", e.getMessage(), e);
            return false;
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å—å signature (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram Web Apps)
     * –°–æ–≥–ª–∞—Å–Ω–æ https://core.telegram.org/bots/webapps#validating-data-received-via-the-mini-app
     */
    private boolean validateSignature(Map<String, String> params, String expectedSignature, String botToken) {
        try {
            LOGGER.debug("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è signature –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ Telegram Web Apps");
            
            // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ (–≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫—Ä–æ–º–µ signature –∏ hash, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
            // –í–ê–ñ–ù–û: –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ URL-decoded –≤–∏–¥–µ
            String dataCheckString = params.entrySet().stream()
                    .filter(entry -> !"signature".equals(entry.getKey()) && !"hash".equals(entry.getKey()))
                    .sorted(Map.Entry.comparingByKey())
                    .map(entry -> {
                        try {
                            String decodedValue = java.net.URLDecoder.decode(entry.getValue(), StandardCharsets.UTF_8);
                            return entry.getKey() + "=" + decodedValue;
                        } catch (Exception e) {
                            // –ï—Å–ª–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                            return entry.getKey() + "=" + entry.getValue();
                        }
                    })
                    .collect(Collectors.joining("\n"));
            
            LOGGER.debug("üîç –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ signature: {}", dataCheckString);
            
            // –ê–ª–≥–æ—Ä–∏—Ç–º —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Telegram:
            // 1. secret_key = HMAC-SHA256("WebAppData", bot_token)
            // 2. signature = HMAC-SHA256(data_check_string, secret_key)
            
            Mac hmacSha256 = Mac.getInstance(HMAC_SHA256);
            
            // –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
            SecretKeySpec webAppKeySpec = new SecretKeySpec("WebAppData".getBytes(StandardCharsets.UTF_8), HMAC_SHA256);
            hmacSha256.init(webAppKeySpec);
            byte[] secretKey = hmacSha256.doFinal(botToken.getBytes(StandardCharsets.UTF_8));
            
            LOGGER.debug("üîç –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á —Å–æ–∑–¥–∞–Ω (–¥–ª–∏–Ω–∞: {} –±–∞–π—Ç)", secretKey.length);
            
            // –®–∞–≥ 2: –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–º –∫–ª—é—á–æ–º
            hmacSha256 = Mac.getInstance(HMAC_SHA256);
            SecretKeySpec dataKeySpec = new SecretKeySpec(secretKey, HMAC_SHA256);
            hmacSha256.init(dataKeySpec);
            byte[] signatureBytes = hmacSha256.doFinal(dataCheckString.getBytes(StandardCharsets.UTF_8));
            
            // Signature –≤ Web Apps —Ñ–æ—Ä–º–∞—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç URL-safe Base64
            String calculatedSignature = java.util.Base64.getUrlEncoder().withoutPadding().encodeToString(signatureBytes);
            
            LOGGER.debug("üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ signature: –æ–∂–∏–¥–∞–µ–º—ã–π={}, –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π={}", expectedSignature, calculatedSignature);
            
            boolean isValid = calculatedSignature.equals(expectedSignature);
            
            if (!isValid) {
                // –ü—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π Base64 (–Ω–µ URL-safe)
                LOGGER.debug("üîç –ü—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π Base64 (–Ω–µ URL-safe)");
                String regularBase64Signature = java.util.Base64.getEncoder().encodeToString(signatureBytes);
                LOGGER.debug("üîç –û–±—ã—á–Ω—ã–π Base64 signature: {}", regularBase64Signature);
                isValid = regularBase64Signature.equals(expectedSignature);
                
                if (!isValid) {
                    // –ü—Ä–æ–±—É–µ–º —Å padding –¥–ª—è URL-safe
                    LOGGER.debug("üîç –ü—Ä–æ–±—É–µ–º URL-safe Base64 —Å padding");
                    String urlSafeWithPadding = java.util.Base64.getUrlEncoder().encodeToString(signatureBytes);
                    LOGGER.debug("üîç URL-safe —Å padding signature: {}", urlSafeWithPadding);
                    isValid = urlSafeWithPadding.equals(expectedSignature);
                }
            }
            
            if (isValid) {
                LOGGER.debug("‚úÖ Signature –≤–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!");
            } else {
                LOGGER.warn("‚ùå –í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã signature –Ω–µ —Å–æ–≤–ø–∞–ª–∏");
            }
            
            return isValid;
            
        } catch (NoSuchAlgorithmException | InvalidKeyException e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è signature: {}", e.getMessage(), e);
            return false;
        }
    }
    
    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –±–∞–π—Ç—ã –≤ hex —Å—Ç—Ä–æ–∫—É
     */
    private String bytesToHex(byte[] bytes) {
        StringBuilder result = new StringBuilder();
        for (byte b : bytes) {
            result.append(String.format("%02x", b));
        }
        return result.toString();
    }
    
    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç telegram_id –∏–∑ initData
     */
    public Long extractTelegramId(String initData) {
        try {
            Map<String, String> params = parseInitData(initData);
            String userStr = params.get("user");
            
            if (userStr != null) {
                // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ JSON –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è id
                // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å JSON –ø–∞—Ä—Å–µ—Ä
                int idIndex = userStr.indexOf("\"id\":");
                if (idIndex != -1) {
                    int start = userStr.indexOf(":", idIndex) + 1;
                    int end = userStr.indexOf(",", start);
                    if (end == -1) {
                        end = userStr.indexOf("}", start);
                    }
                    if (end != -1) {
                        String idStr = userStr.substring(start, end).trim();
                        return Long.parseLong(idStr);
                    }
                }
            }
            
            LOGGER.warn("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å telegram_id –∏–∑ initData");
            return null;
            
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è telegram_id: {}", e.getMessage(), e);
            return null;
        }
    }
}
