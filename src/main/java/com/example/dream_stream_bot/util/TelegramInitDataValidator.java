package com.example.dream_stream_bot.util;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.example.dream_stream_bot.model.telegram.BotEntity;
import com.example.dream_stream_bot.service.telegram.BotService;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.nio.charset.StandardCharsets;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.time.Instant;
import java.util.Arrays;
import java.util.Map;
import java.util.TreeMap;
import java.util.stream.Collectors;

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Telegram Web App initData
 */
@Component
public class TelegramInitDataValidator {
    
    private static final Logger LOGGER = LoggerFactory.getLogger(TelegramInitDataValidator.class);
    private static final String HMAC_SHA256 = "HmacSHA256";
    private static final long MAX_AUTH_AGE_SECONDS = 600; // 10 –º–∏–Ω—É—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    
    private final BotService botService;
    
    @Autowired
    public TelegramInitDataValidator(BotService botService) {
        this.botService = botService;
    }
    
    /**
     * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç Telegram initData –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
     * 
     * @param initData —Å—Ç—Ä–æ–∫–∞ initData –æ—Ç Telegram Web App
     * @param botName –∏–º—è –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
     * @return true –µ—Å–ª–∏ –≤–∞–ª–∏–¥–Ω–∞, false –∏–Ω–∞—á–µ
     */
    public boolean validateInitData(String initData, String botName) {
        LOGGER.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é initData –¥–ª—è –±–æ—Ç–∞: {}", botName);
        LOGGER.debug("üîç InitData (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤): {}", 
                initData != null && initData.length() > 100 ? initData.substring(0, 100) + "..." : initData);
        
        if (initData == null || initData.trim().isEmpty()) {
            LOGGER.warn("‚ùå InitData –ø—É—Å—Ç–∞—è –∏–ª–∏ null");
            return false;
        }
        
        if (botName == null || botName.trim().isEmpty()) {
            LOGGER.warn("‚ùå –ò–º—è –±–æ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ");
            return false;
        }
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            LOGGER.debug("üîç –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö");
            String botToken = getBotToken(botName);
            if (botToken == null) {
                LOGGER.warn("‚ùå –¢–æ–∫–µ–Ω –¥–ª—è –±–æ—Ç–∞ '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω", botName);
                return false;
            }
            LOGGER.debug("‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –ø–æ–ª—É—á–µ–Ω (–¥–ª–∏–Ω–∞: {})", botToken.length());
            
            // –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            LOGGER.debug("üîç –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã initData");
            Map<String, String> params = parseInitData(initData);
            LOGGER.debug("üîç –ü–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {}", params.keySet());
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ hash, —Ç–∞–∫ –∏ signature)
            if (!params.containsKey("auth_date")) {
                LOGGER.warn("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ auth_date");
                LOGGER.debug("üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è: {}", params.keySet());
                return false;
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∏ (—Å—Ç–∞—Ä—ã–π hash –∏–ª–∏ –Ω–æ–≤—ã–π signature)
            String hash = params.get("hash");
            String signature = params.get("signature");
            String authDateStr = params.get("auth_date");
            
            if (hash == null && signature == null) {
                LOGGER.warn("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è –ø–æ–¥–ø–∏—Å–∏ (hash –∏–ª–∏ signature)");
                LOGGER.debug("üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è: {}", params.keySet());
                return false;
            }
            
            if (signature != null) {
                LOGGER.debug("üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å signature: {} | AuthDate: {}", signature, authDateStr);
            } else {
                LOGGER.debug("üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å hash: {} | AuthDate: {}", hash, authDateStr);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è auth_date
            LOGGER.debug("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è auth_date");
            if (!validateAuthDate(authDateStr)) {
                LOGGER.warn("‚ùå Auth date —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è: {}", authDateStr);
                return false;
            }
            LOGGER.debug("‚úÖ Auth date –≤–∞–ª–∏–¥–Ω–∞");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞)
            boolean signatureValid = false;
            if (signature != null) {
                LOGGER.debug("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å—å signature");
                signatureValid = validateSignature(params, signature, botToken);
                if (!signatureValid) {
                    LOGGER.warn("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å signature –¥–ª—è –±–æ—Ç–∞ '{}'", botName);
                }
            } else if (hash != null) {
                LOGGER.debug("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—É—é –ø–æ–¥–ø–∏—Å—å hash");
                signatureValid = validateHash(params, hash, botToken);
                if (!signatureValid) {
                    LOGGER.warn("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å hash –¥–ª—è –±–æ—Ç–∞ '{}'", botName);
                }
            }
            
            if (!signatureValid) {
                return false;
            }
            LOGGER.debug("‚úÖ –ü–æ–¥–ø–∏—Å—å –≤–∞–ª–∏–¥–Ω–∞");
            
            LOGGER.info("‚úÖ InitData –≤–∞–ª–∏–¥–Ω–∞ –¥–ª—è –±–æ—Ç–∞ '{}'", botName);
            return true;
            
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ initData –¥–ª—è –±–æ—Ç–∞ '{}': {}", botName, e.getMessage(), e);
            return false;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    private String getBotToken(String botName) {
        try {
            var bots = botService.findAll();
            return bots.stream()
                    .filter(bot -> botName.equals(bot.getName()))
                    .findFirst()
                    .map(BotEntity::getToken)
                    .orElse(null);
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ '{}': {}", botName, e.getMessage(), e);
            return null;
        }
    }
    
    /**
     * –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É initData –≤ Map –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
     */
    private Map<String, String> parseInitData(String initData) {
        return Arrays.stream(initData.split("&"))
                .map(param -> param.split("=", 2))
                .filter(parts -> parts.length == 2)
                .collect(Collectors.toMap(
                        parts -> parts[0],
                        parts -> parts[1],
                        (existing, replacement) -> existing,
                        TreeMap::new
                ));
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è auth_date (–Ω–µ —Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã)
     */
    private boolean validateAuthDate(String authDateStr) {
        try {
            long authDate = Long.parseLong(authDateStr);
            long currentTime = Instant.now().getEpochSecond();
            long age = currentTime - authDate;
            
            return age <= MAX_AUTH_AGE_SECONDS;
        } catch (NumberFormatException e) {
            LOGGER.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç auth_date: {}", authDateStr);
            return false;
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç HMAC-SHA256 –ø–æ–¥–ø–∏—Å—å (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å hash)
     */
    private boolean validateHash(Map<String, String> params, String expectedHash, String botToken) {
        try {
            // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ (–≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫—Ä–æ–º–µ hash –∏ signature, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
            String dataCheckString = params.entrySet().stream()
                    .filter(entry -> !"hash".equals(entry.getKey()) && !"signature".equals(entry.getKey()))
                    .sorted(Map.Entry.comparingByKey())
                    .map(entry -> entry.getKey() + "=" + entry.getValue())
                    .collect(Collectors.joining("\n"));
            
            // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å
            String secretKey = "WebAppData";
            Mac mac = Mac.getInstance(HMAC_SHA256);
            SecretKeySpec secretKeySpec = new SecretKeySpec(botToken.getBytes(StandardCharsets.UTF_8), HMAC_SHA256);
            mac.init(secretKeySpec);
            
            byte[] hashBytes = mac.doFinal(dataCheckString.getBytes(StandardCharsets.UTF_8));
            String calculatedHash = bytesToHex(hashBytes);
            
            LOGGER.debug("üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ö–µ—à–µ–π: –æ–∂–∏–¥–∞–µ–º—ã–π={}, –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π={}", expectedHash, calculatedHash);
            
            return calculatedHash.equals(expectedHash);
            
        } catch (NoSuchAlgorithmException | InvalidKeyException e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è HMAC: {}", e.getMessage(), e);
            return false;
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å—å signature (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram)
     */
    private boolean validateSignature(Map<String, String> params, String expectedSignature, String botToken) {
        try {
            LOGGER.debug("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è signature –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ Telegram");
            
            // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ (–≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫—Ä–æ–º–µ signature –∏ hash, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
            String dataCheckString = params.entrySet().stream()
                    .filter(entry -> !"signature".equals(entry.getKey()) && !"hash".equals(entry.getKey()))
                    .sorted(Map.Entry.comparingByKey())
                    .map(entry -> entry.getKey() + "=" + entry.getValue())
                    .collect(Collectors.joining("\n"));
            
            LOGGER.debug("üîç –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ signature: {}", dataCheckString);
            
            // –î–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –ø–æ–¥–ø–∏—Å–∏
            byte[] signatureBytes = null;
            
            // –ê–ª–≥–æ—Ä–∏—Ç–º 1: –î–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–π (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–ª—è WebApp)
            try {
                Mac hmacSha256 = Mac.getInstance(HMAC_SHA256);
                SecretKeySpec webAppKeySpec = new SecretKeySpec("WebAppData".getBytes(StandardCharsets.UTF_8), HMAC_SHA256);
                hmacSha256.init(webAppKeySpec);
                byte[] secretKey = hmacSha256.doFinal(botToken.getBytes(StandardCharsets.UTF_8));
                
                hmacSha256 = Mac.getInstance(HMAC_SHA256);
                SecretKeySpec dataKeySpec = new SecretKeySpec(secretKey, HMAC_SHA256);
                hmacSha256.init(dataKeySpec);
                signatureBytes = hmacSha256.doFinal(dataCheckString.getBytes(StandardCharsets.UTF_8));
            } catch (Exception e) {
                LOGGER.debug("üîç –û—à–∏–±–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ 1: {}", e.getMessage());
            }
            
            // Signature –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ Base64, –∞ –Ω–µ hex
            String calculatedSignature = java.util.Base64.getEncoder().encodeToString(signatureBytes);
            
            LOGGER.debug("üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ signature: –æ–∂–∏–¥–∞–µ–º—ã–π={}, –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π={}", expectedSignature, calculatedSignature);
            
            boolean isValid = calculatedSignature.equals(expectedSignature);
            
            if (!isValid) {
                // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º - –ø—Ä—è–º–∞—è –ø–æ–¥–ø–∏—Å—å –∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                LOGGER.debug("üîç –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è signature");
                Mac simpleMac = Mac.getInstance(HMAC_SHA256);
                SecretKeySpec simpleKeySpec = new SecretKeySpec(botToken.getBytes(StandardCharsets.UTF_8), HMAC_SHA256);
                simpleMac.init(simpleKeySpec);
                byte[] simpleSignatureBytes = simpleMac.doFinal(dataCheckString.getBytes(StandardCharsets.UTF_8));
                String simpleCalculatedSignature = java.util.Base64.getEncoder().encodeToString(simpleSignatureBytes);
                
                LOGGER.debug("üîç –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è signature: {}", simpleCalculatedSignature);
                isValid = simpleCalculatedSignature.equals(expectedSignature);
            }
            
            return isValid;
            
        } catch (NoSuchAlgorithmException | InvalidKeyException e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è signature: {}", e.getMessage(), e);
            return false;
        }
    }
    
    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –±–∞–π—Ç—ã –≤ hex —Å—Ç—Ä–æ–∫—É
     */
    private String bytesToHex(byte[] bytes) {
        StringBuilder result = new StringBuilder();
        for (byte b : bytes) {
            result.append(String.format("%02x", b));
        }
        return result.toString();
    }
    
    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç telegram_id –∏–∑ initData
     */
    public Long extractTelegramId(String initData) {
        try {
            Map<String, String> params = parseInitData(initData);
            String userStr = params.get("user");
            
            if (userStr != null) {
                // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ JSON –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è id
                // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å JSON –ø–∞—Ä—Å–µ—Ä
                int idIndex = userStr.indexOf("\"id\":");
                if (idIndex != -1) {
                    int start = userStr.indexOf(":", idIndex) + 1;
                    int end = userStr.indexOf(",", start);
                    if (end == -1) {
                        end = userStr.indexOf("}", start);
                    }
                    if (end != -1) {
                        String idStr = userStr.substring(start, end).trim();
                        return Long.parseLong(idStr);
                    }
                }
            }
            
            LOGGER.warn("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å telegram_id –∏–∑ initData");
            return null;
            
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è telegram_id: {}", e.getMessage(), e);
            return null;
        }
    }
}
