package com.example.dream_stream_bot.model.keyboard;

import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.ArrayList;
import java.util.List;

public class InlineKeyboardMarkupBuilder {

    private final InlineKeyboardMarkup keyboard;
    private final List<List<InlineKeyboardButton>> rows;

    public InlineKeyboardMarkupBuilder() {
        this.keyboard = new InlineKeyboardMarkup();
        this.rows = new ArrayList<>();
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –≤ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É (–∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫ –Ω–µ—Ç)
     */
    public InlineKeyboardMarkupBuilder addKey(String text, String callbackData) {
        if (rows.isEmpty()) {
            rows.add(new ArrayList<>());
        }
        
        InlineKeyboardButton button = new InlineKeyboardButton();
        button.setText(text);
        button.setCallbackData(callbackData);
        
        rows.get(rows.size() - 1).add(button);
        return this;
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
     */
    public InlineKeyboardMarkupBuilder addButtonOnNewRow(String text, String callbackData) {
        List<InlineKeyboardButton> row = new ArrayList<>();
        InlineKeyboardButton button = new InlineKeyboardButton();
        button.setText(text);
        button.setCallbackData(callbackData);
        row.add(button);
        rows.add(row);
        System.out.println("üîß InlineKeyboardMarkupBuilder: –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '" + text + "'");
        return this;
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ–∫ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
     */
    public InlineKeyboardMarkupBuilder addRow(String... buttons) {
        List<InlineKeyboardButton> row = new ArrayList<>();
        for (String buttonText : buttons) {
            InlineKeyboardButton button = new InlineKeyboardButton();
            button.setText(buttonText);
            button.setCallbackData(buttonText.toLowerCase().replace(" ", "_"));
            row.add(button);
        }
        rows.add(row);
        return this;
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º callback'–æ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
     */
    public InlineKeyboardMarkupBuilder addRow(String buttonText, String callbackData) {
        List<InlineKeyboardButton> row = new ArrayList<>();
        InlineKeyboardButton button = new InlineKeyboardButton();
        button.setText(buttonText);
        button.setCallbackData(callbackData);
        row.add(button);
        rows.add(row);
        return this;
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü) –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
     */
    public InlineKeyboardMarkupBuilder addPageNavigation(int currentPage, int totalPages) {
        if (totalPages > 1) {
            List<InlineKeyboardButton> row = new ArrayList<>();
            for (int i = 0; i < totalPages; i++) {
                InlineKeyboardButton button = new InlineKeyboardButton();
                button.setText(String.valueOf(i + 1));
                button.setCallbackData(String.valueOf(i + 1));
                row.add(button);
            }
            rows.add(row);
        }
        return this;
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–Ω–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π) –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
     */
    public InlineKeyboardMarkupBuilder addInfoRow(String text) {
        List<InlineKeyboardButton> row = new ArrayList<>();
        InlineKeyboardButton button = new InlineKeyboardButton();
        button.setText(text);
        button.setCallbackData("info_" + System.currentTimeMillis()); // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π callback –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        rows.add(row);
        return this;
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
     */
    public InlineKeyboardMarkup build() {
        keyboard.setKeyboard(rows);
        return keyboard;
    }
}
