package com.example.dream_stream_bot.controller;

import com.example.dream_stream_bot.dto.StickerSetDto;
import com.example.dream_stream_bot.model.telegram.StickerSet;
import com.example.dream_stream_bot.service.telegram.StickerSetService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/stickersets")
@CrossOrigin(origins = "*") // –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
public class StickerSetController {
    
    private static final Logger LOGGER = LoggerFactory.getLogger(StickerSetController.class);
    private final StickerSetService stickerSetService;
    
    @Autowired
    public StickerSetController(StickerSetService stickerSetService) {
        this.stickerSetService = stickerSetService;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—ã
     */
    @GetMapping
    public ResponseEntity<List<StickerSetDto>> getAllStickerSets() {
        try {
            LOGGER.info("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤");
            List<StickerSet> stickerSets = stickerSetService.findAll();
            List<StickerSetDto> dtos = stickerSets.stream()
                    .map(StickerSetDto::fromEntity)
                    .collect(Collectors.toList());
            
            LOGGER.info("‚úÖ –ù–∞–π–¥–µ–Ω–æ {} —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤", dtos.size());
            return ResponseEntity.ok(dtos);
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç –ø–æ ID
     */
    @GetMapping("/{id}")
    public ResponseEntity<StickerSetDto> getStickerSetById(@PathVariable Long id) {
        try {
            LOGGER.info("üîç –ü–æ–∏—Å–∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ –ø–æ ID: {}", id);
            StickerSet stickerSet = stickerSetService.findById(id);
            
            if (stickerSet == null) {
                LOGGER.warn("‚ö†Ô∏è –°—Ç–∏–∫–µ—Ä—Å–µ—Ç —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω", id);
                return ResponseEntity.notFound().build();
            }
            
            StickerSetDto dto = StickerSetDto.fromEntity(stickerSet);
            LOGGER.info("‚úÖ –°—Ç–∏–∫–µ—Ä—Å–µ—Ç –Ω–∞–π–¥–µ–Ω: {}", dto.getTitle());
            return ResponseEntity.ok(dto);
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ —Å ID: {}", id, e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—ã –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @GetMapping("/user/{userId}")
    public ResponseEntity<List<StickerSetDto>> getStickerSetsByUserId(@PathVariable Long userId) {
        try {
            LOGGER.info("üîç –ü–æ–∏—Å–∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", userId);
            List<StickerSet> stickerSets = stickerSetService.findByUserId(userId);
            List<StickerSetDto> dtos = stickerSets.stream()
                    .map(StickerSetDto::fromEntity)
                    .collect(Collectors.toList());
            
            LOGGER.info("‚úÖ –ù–∞–π–¥–µ–Ω–æ {} —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", dtos.size(), userId);
            return ResponseEntity.ok(dtos);
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", userId, e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
     */
    @GetMapping("/search")
    public ResponseEntity<StickerSetDto> getStickerSetByName(@RequestParam String name) {
        try {
            LOGGER.info("üîç –ü–æ–∏—Å–∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: {}", name);
            StickerSet stickerSet = stickerSetService.findByName(name);
            
            if (stickerSet == null) {
                LOGGER.warn("‚ö†Ô∏è –°—Ç–∏–∫–µ—Ä—Å–µ—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω", name);
                return ResponseEntity.notFound().build();
            }
            
            StickerSetDto dto = StickerSetDto.fromEntity(stickerSet);
            LOGGER.info("‚úÖ –°—Ç–∏–∫–µ—Ä—Å–µ—Ç –Ω–∞–π–¥–µ–Ω: {}", dto.getTitle());
            return ResponseEntity.ok(dto);
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º: {}", name, e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç
     */
    @PostMapping
    public ResponseEntity<StickerSetDto> createStickerSet(@RequestBody StickerSetDto stickerSetDto) {
        try {
            LOGGER.info("‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞: {}", stickerSetDto.getTitle());
            
            if (stickerSetDto.getUserId() == null || stickerSetDto.getTitle() == null || stickerSetDto.getName() == null) {
                LOGGER.warn("‚ö†Ô∏è –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞");
                return ResponseEntity.badRequest().build();
            }
            
            StickerSet newStickerSet = stickerSetService.createStickerSet(
                stickerSetDto.getUserId(),
                stickerSetDto.getTitle(),
                stickerSetDto.getName()
            );
            
            StickerSetDto createdDto = StickerSetDto.fromEntity(newStickerSet);
            LOGGER.info("‚úÖ –°—Ç–∏–∫–µ—Ä—Å–µ—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {}", createdDto.getId());
            return ResponseEntity.status(HttpStatus.CREATED).body(createdDto);
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç
     */
    @PutMapping("/{id}")
    public ResponseEntity<StickerSetDto> updateStickerSet(@PathVariable Long id, @RequestBody StickerSetDto stickerSetDto) {
        try {
            LOGGER.info("‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ —Å ID: {}", id);
            
            StickerSet existingStickerSet = stickerSetService.findById(id);
            if (existingStickerSet == null) {
                LOGGER.warn("‚ö†Ô∏è –°—Ç–∏–∫–µ—Ä—Å–µ—Ç —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", id);
                return ResponseEntity.notFound().build();
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
            if (stickerSetDto.getTitle() != null) {
                existingStickerSet.setTitle(stickerSetDto.getTitle());
            }
            if (stickerSetDto.getName() != null) {
                existingStickerSet.setName(stickerSetDto.getName());
            }
            
            StickerSet updatedStickerSet = stickerSetService.save(existingStickerSet);
            StickerSetDto updatedDto = StickerSetDto.fromEntity(updatedStickerSet);
            
            LOGGER.info("‚úÖ –°—Ç–∏–∫–µ—Ä—Å–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: {}", updatedDto.getTitle());
            return ResponseEntity.ok(updatedDto);
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ —Å ID: {}", id, e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
    
    /**
     * –£–¥–∞–ª–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteStickerSet(@PathVariable Long id) {
        try {
            LOGGER.info("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ —Å ID: {}", id);
            
            StickerSet existingStickerSet = stickerSetService.findById(id);
            if (existingStickerSet == null) {
                LOGGER.warn("‚ö†Ô∏è –°—Ç–∏–∫–µ—Ä—Å–µ—Ç —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", id);
                return ResponseEntity.notFound().build();
            }
            
            stickerSetService.deleteById(id);
            LOGGER.info("‚úÖ –°—Ç–∏–∫–µ—Ä—Å–µ—Ç —Å ID {} —É–¥–∞–ª–µ–Ω", id);
            return ResponseEntity.noContent().build();
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ —Å ID: {}", id, e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
} 