package com.example.dream_stream_bot.controller;

import com.example.dream_stream_bot.dto.StickerSetDto;
import com.example.dream_stream_bot.model.telegram.StickerSet;
import com.example.dream_stream_bot.service.telegram.StickerSetService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import jakarta.validation.Valid;
import jakarta.validation.constraints.Positive;
import jakarta.validation.constraints.NotBlank;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;

import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/stickersets")
@CrossOrigin(origins = "*") // –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
@Tag(name = "–°—Ç–∏–∫–µ—Ä—Å–µ—Ç—ã", description = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
@SecurityRequirement(name = "TelegramInitData")
public class StickerSetController {
    
    private static final Logger LOGGER = LoggerFactory.getLogger(StickerSetController.class);
    private final StickerSetService stickerSetService;
    
    @Autowired
    public StickerSetController(StickerSetService stickerSetService) {
        this.stickerSetService = stickerSetService;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—ã
     */
    @GetMapping
    @Operation(
        summary = "–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—ã",
        description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ. –¢—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram Web App."
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "–°–ø–∏—Å–æ–∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω",
            content = @Content(schema = @Schema(implementation = StickerSetDto.class),
                examples = @ExampleObject(value = """
                    [
                        {
                            "id": 1,
                            "userId": 123456789,
                            "title": "–ú–æ–∏ —Å—Ç–∏–∫–µ—Ä—ã",
                            "name": "my_stickers_by_StickerGalleryBot",
                            "createdAt": "2025-09-15T10:30:00"
                        },
                        {
                            "id": 2,
                            "userId": 987654321,
                            "title": "–ö–æ—Ç–∏–∫–∏",
                            "name": "cats_stickers_by_StickerGalleryBot",
                            "createdAt": "2025-09-15T11:45:00"
                        }
                    ]
                    """))),
        @ApiResponse(responseCode = "401", description = "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - —Ç—Ä–µ–±—É–µ—Ç—Å—è Telegram Web App –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"),
        @ApiResponse(responseCode = "500", description = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    })
    public ResponseEntity<List<StickerSetDto>> getAllStickerSets() {
        try {
            LOGGER.info("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤");
            List<StickerSet> stickerSets = stickerSetService.findAll();
            List<StickerSetDto> dtos = stickerSets.stream()
                    .map(StickerSetDto::fromEntity)
                    .collect(Collectors.toList());
            
            LOGGER.info("‚úÖ –ù–∞–π–¥–µ–Ω–æ {} —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤", dtos.size());
            return ResponseEntity.ok(dtos);
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç –ø–æ ID
     */
    @GetMapping("/{id}")
    @Operation(
        summary = "–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç –ø–æ ID",
        description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–µ –ø–æ –µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É."
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "–°—Ç–∏–∫–µ—Ä—Å–µ—Ç –Ω–∞–π–¥–µ–Ω",
            content = @Content(schema = @Schema(implementation = StickerSetDto.class),
                examples = @ExampleObject(value = """
                    {
                        "id": 1,
                        "userId": 123456789,
                        "title": "–ú–æ–∏ —Å—Ç–∏–∫–µ—Ä—ã",
                        "name": "my_stickers_by_StickerGalleryBot",
                        "createdAt": "2025-09-15T10:30:00"
                    }
                    """))),
        @ApiResponse(responseCode = "400", description = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º)"),
        @ApiResponse(responseCode = "401", description = "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - —Ç—Ä–µ–±—É–µ—Ç—Å—è Telegram Web App –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"),
        @ApiResponse(responseCode = "404", description = "–°—Ç–∏–∫–µ—Ä—Å–µ—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω"),
        @ApiResponse(responseCode = "500", description = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    })
    public ResponseEntity<StickerSetDto> getStickerSetById(
            @Parameter(description = "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞", required = true, example = "1")
            @PathVariable @Positive(message = "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º") Long id) {
        try {
            LOGGER.info("üîç –ü–æ–∏—Å–∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ –ø–æ ID: {}", id);
            StickerSet stickerSet = stickerSetService.findById(id);
            
            if (stickerSet == null) {
                LOGGER.warn("‚ö†Ô∏è –°—Ç–∏–∫–µ—Ä—Å–µ—Ç —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω", id);
                return ResponseEntity.notFound().build();
            }
            
            StickerSetDto dto = StickerSetDto.fromEntity(stickerSet);
            LOGGER.info("‚úÖ –°—Ç–∏–∫–µ—Ä—Å–µ—Ç –Ω–∞–π–¥–µ–Ω: {}", dto.getTitle());
            return ResponseEntity.ok(dto);
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ —Å ID: {}", id, e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—ã –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @GetMapping("/user/{userId}")
    @Operation(
        summary = "–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "–°–ø–∏—Å–æ–∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω",
            content = @Content(schema = @Schema(implementation = StickerSetDto.class),
                examples = @ExampleObject(value = """
                    [
                        {
                            "id": 1,
                            "userId": 123456789,
                            "title": "–ú–æ–∏ —Å—Ç–∏–∫–µ—Ä—ã",
                            "name": "my_stickers_by_StickerGalleryBot",
                            "createdAt": "2025-09-15T10:30:00"
                        },
                        {
                            "id": 3,
                            "userId": 123456789,
                            "title": "–ö–æ—Ç–∏–∫–∏",
                            "name": "cats_by_StickerGalleryBot",
                            "createdAt": "2025-09-15T12:15:00"
                        }
                    ]
                    """))),
        @ApiResponse(responseCode = "400", description = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º)"),
        @ApiResponse(responseCode = "401", description = "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - —Ç—Ä–µ–±—É–µ—Ç—Å—è Telegram Web App –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"),
        @ApiResponse(responseCode = "500", description = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    })
    public ResponseEntity<List<StickerSetDto>> getStickerSetsByUserId(
            @Parameter(description = "Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", required = true, example = "123456789")
            @PathVariable @Positive(message = "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º") Long userId) {
        try {
            LOGGER.info("üîç –ü–æ–∏—Å–∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", userId);
            List<StickerSet> stickerSets = stickerSetService.findByUserId(userId);
            List<StickerSetDto> dtos = stickerSets.stream()
                    .map(StickerSetDto::fromEntity)
                    .collect(Collectors.toList());
            
            LOGGER.info("‚úÖ –ù–∞–π–¥–µ–Ω–æ {} —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", dtos.size(), userId);
            return ResponseEntity.ok(dtos);
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", userId, e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
     */
    @GetMapping("/search")
    @Operation(
        summary = "–ü–æ–∏—Å–∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é",
        description = "–ò—â–µ—Ç —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç –ø–æ –µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∏–º–µ–Ω–∏ (name). –ò–º—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Telegram API."
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "–°—Ç–∏–∫–µ—Ä—Å–µ—Ç –Ω–∞–π–¥–µ–Ω",
            content = @Content(schema = @Schema(implementation = StickerSetDto.class),
                examples = @ExampleObject(value = """
                    {
                        "id": 1,
                        "userId": 123456789,
                        "title": "–ú–æ–∏ —Å—Ç–∏–∫–µ—Ä—ã",
                        "name": "my_stickers_by_StickerGalleryBot",
                        "createdAt": "2025-09-15T10:30:00"
                    }
                    """))),
        @ApiResponse(responseCode = "400", description = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º)"),
        @ApiResponse(responseCode = "401", description = "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - —Ç—Ä–µ–±—É–µ—Ç—Å—è Telegram Web App –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"),
        @ApiResponse(responseCode = "404", description = "–°—Ç–∏–∫–µ—Ä—Å–µ—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω"),
        @ApiResponse(responseCode = "500", description = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    })
    public ResponseEntity<StickerSetDto> getStickerSetByName(
            @Parameter(description = "–£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ –¥–ª—è Telegram API", required = true, example = "my_stickers_by_StickerGalleryBot")
            @RequestParam @NotBlank(message = "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º") String name) {
        try {
            LOGGER.info("üîç –ü–æ–∏—Å–∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: {}", name);
            StickerSet stickerSet = stickerSetService.findByName(name);
            
            if (stickerSet == null) {
                LOGGER.warn("‚ö†Ô∏è –°—Ç–∏–∫–µ—Ä—Å–µ—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω", name);
                return ResponseEntity.notFound().build();
            }
            
            StickerSetDto dto = StickerSetDto.fromEntity(stickerSet);
            LOGGER.info("‚úÖ –°—Ç–∏–∫–µ—Ä—Å–µ—Ç –Ω–∞–π–¥–µ–Ω: {}", dto.getTitle());
            return ResponseEntity.ok(dto);
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º: {}", name, e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç
     */
    @PostMapping
    @Operation(
        summary = "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç",
        description = "–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è."
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "201", description = "–°—Ç–∏–∫–µ—Ä—Å–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
            content = @Content(schema = @Schema(implementation = StickerSetDto.class),
                examples = @ExampleObject(value = """
                    {
                        "id": 5,
                        "userId": 123456789,
                        "title": "–ù–æ–≤—ã–µ —Å—Ç–∏–∫–µ—Ä—ã",
                        "name": "new_stickers_by_StickerGalleryBot",
                        "createdAt": "2025-09-15T14:30:00"
                    }
                    """))),
        @ApiResponse(responseCode = "400", description = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
            content = @Content(examples = @ExampleObject(value = """
                {
                    "validationErrors": {
                        "userId": "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º",
                        "title": "–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º",
                        "name": "–ò–º—è —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è"
                    },
                    "error": "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
                    "message": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–ø—Ä–æ—Å–µ"
                }
                """))),
        @ApiResponse(responseCode = "401", description = "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - —Ç—Ä–µ–±—É–µ—Ç—Å—è Telegram Web App –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"),
        @ApiResponse(responseCode = "500", description = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    })
    public ResponseEntity<StickerSetDto> createStickerSet(
            @Parameter(description = "–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞", required = true)
            @Valid @RequestBody StickerSetDto stickerSetDto) {
        try {
            LOGGER.info("‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞: {}", stickerSetDto.getTitle());
            
            StickerSet newStickerSet = stickerSetService.createStickerSet(
                stickerSetDto.getUserId(),
                stickerSetDto.getTitle(),
                stickerSetDto.getName()
            );
            
            StickerSetDto createdDto = StickerSetDto.fromEntity(newStickerSet);
            LOGGER.info("‚úÖ –°—Ç–∏–∫–µ—Ä—Å–µ—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {}", createdDto.getId());
            return ResponseEntity.status(HttpStatus.CREATED).body(createdDto);
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç
     */
    @PutMapping("/{id}")
    @Operation(
        summary = "–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç",
        description = "–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç. –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å title –∏ name. ID –∏ userId –Ω–µ –∏–∑–º–µ–Ω—è—é—Ç—Å—è."
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "–°—Ç–∏–∫–µ—Ä—Å–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω",
            content = @Content(schema = @Schema(implementation = StickerSetDto.class),
                examples = @ExampleObject(value = """
                    {
                        "id": 1,
                        "userId": 123456789,
                        "title": "–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã",
                        "name": "updated_stickers_by_StickerGalleryBot",
                        "createdAt": "2025-09-15T10:30:00"
                    }
                    """))),
        @ApiResponse(responseCode = "400", description = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"),
        @ApiResponse(responseCode = "401", description = "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - —Ç—Ä–µ–±—É–µ—Ç—Å—è Telegram Web App –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"),
        @ApiResponse(responseCode = "404", description = "–°—Ç–∏–∫–µ—Ä—Å–µ—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω"),
        @ApiResponse(responseCode = "500", description = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    })
    public ResponseEntity<StickerSetDto> updateStickerSet(
            @Parameter(description = "ID —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", required = true, example = "1")
            @PathVariable @Positive(message = "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º") Long id,
            @Parameter(description = "–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞", required = true)
            @Valid @RequestBody StickerSetDto stickerSetDto) {
        try {
            LOGGER.info("‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ —Å ID: {}", id);
            
            StickerSet existingStickerSet = stickerSetService.findById(id);
            if (existingStickerSet == null) {
                LOGGER.warn("‚ö†Ô∏è –°—Ç–∏–∫–µ—Ä—Å–µ—Ç —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", id);
                return ResponseEntity.notFound().build();
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
            if (stickerSetDto.getTitle() != null) {
                existingStickerSet.setTitle(stickerSetDto.getTitle());
            }
            if (stickerSetDto.getName() != null) {
                existingStickerSet.setName(stickerSetDto.getName());
            }
            
            StickerSet updatedStickerSet = stickerSetService.save(existingStickerSet);
            StickerSetDto updatedDto = StickerSetDto.fromEntity(updatedStickerSet);
            
            LOGGER.info("‚úÖ –°—Ç–∏–∫–µ—Ä—Å–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: {}", updatedDto.getTitle());
            return ResponseEntity.ok(updatedDto);
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ —Å ID: {}", id, e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
    
    /**
     * –£–¥–∞–ª–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç
     */
    @DeleteMapping("/{id}")
    @Operation(
        summary = "–£–¥–∞–ª–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç",
        description = "–£–¥–∞–ª—è–µ—Ç —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç –ø–æ –µ–≥–æ ID. –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞."
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "204", description = "–°—Ç–∏–∫–µ—Ä—Å–µ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"),
        @ApiResponse(responseCode = "400", description = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º)"),
        @ApiResponse(responseCode = "401", description = "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - —Ç—Ä–µ–±—É–µ—Ç—Å—è Telegram Web App –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"),
        @ApiResponse(responseCode = "404", description = "–°—Ç–∏–∫–µ—Ä—Å–µ—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω"),
        @ApiResponse(responseCode = "500", description = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    })
    public ResponseEntity<Void> deleteStickerSet(
            @Parameter(description = "ID —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", required = true, example = "1")
            @PathVariable @Positive(message = "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º") Long id) {
        try {
            LOGGER.info("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ —Å ID: {}", id);
            
            StickerSet existingStickerSet = stickerSetService.findById(id);
            if (existingStickerSet == null) {
                LOGGER.warn("‚ö†Ô∏è –°—Ç–∏–∫–µ—Ä—Å–µ—Ç —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", id);
                return ResponseEntity.notFound().build();
            }
            
            stickerSetService.deleteById(id);
            LOGGER.info("‚úÖ –°—Ç–∏–∫–µ—Ä—Å–µ—Ç —Å ID {} —É–¥–∞–ª–µ–Ω", id);
            return ResponseEntity.noContent().build();
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ —Å ID: {}", id, e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
} 