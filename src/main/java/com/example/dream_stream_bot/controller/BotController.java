package com.example.dream_stream_bot.controller;

import com.example.dream_stream_bot.dto.BotEntityDto;
import com.example.dream_stream_bot.model.telegram.BotEntity;
import com.example.dream_stream_bot.service.telegram.BotService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/bots")
@CrossOrigin(origins = "*")
public class BotController {
    
    private static final Logger LOGGER = LoggerFactory.getLogger(BotController.class);
    private final BotService botService;
    
    @Autowired
    public BotController(BotService botService) {
        this.botService = botService;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –±–æ—Ç–æ–≤
     */
    @GetMapping
    public ResponseEntity<List<BotEntityDto>> getAllBots() {
        try {
            LOGGER.info("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –±–æ—Ç–æ–≤");
            List<BotEntity> bots = botService.findAll();
            List<BotEntityDto> dtos = bots.stream()
                    .map(BotEntityDto::fromEntity)
                    .collect(Collectors.toList());
            
            LOGGER.info("‚úÖ –ù–∞–π–¥–µ–Ω–æ {} –±–æ—Ç–æ–≤", dtos.size());
            return ResponseEntity.ok(dtos);
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –±–æ—Ç–æ–≤", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –±–æ—Ç–∞ –ø–æ ID
     */
    @GetMapping("/{id}")
    public ResponseEntity<BotEntityDto> getBotById(@PathVariable Long id) {
        try {
            LOGGER.info("üîç –ü–æ–∏—Å–∫ –±–æ—Ç–∞ –ø–æ ID: {}", id);
            BotEntity bot = botService.findById(id);
            
            if (bot == null) {
                LOGGER.warn("‚ö†Ô∏è –ë–æ—Ç —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω", id);
                return ResponseEntity.notFound().build();
            }
            
            BotEntityDto dto = BotEntityDto.fromEntity(bot);
            LOGGER.info("‚úÖ –ë–æ—Ç –Ω–∞–π–¥–µ–Ω: {}", dto.getName());
            return ResponseEntity.ok(dto);
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –±–æ—Ç–∞ —Å ID: {}", id, e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –±–æ—Ç–æ–≤ –ø–æ —Ç–∏–ø—É
     */
    @GetMapping("/type/{type}")
    public ResponseEntity<List<BotEntityDto>> getBotsByType(@PathVariable String type) {
        try {
            LOGGER.info("üîç –ü–æ–∏—Å–∫ –±–æ—Ç–æ–≤ –ø–æ —Ç–∏–ø—É: {}", type);
            List<BotEntity> bots = botService.findByType(type);
            List<BotEntityDto> dtos = bots.stream()
                    .map(BotEntityDto::fromEntity)
                    .collect(Collectors.toList());
            
            LOGGER.info("‚úÖ –ù–∞–π–¥–µ–Ω–æ {} –±–æ—Ç–æ–≤ —Ç–∏–ø–∞ {}", dtos.size(), type);
            return ResponseEntity.ok(dtos);
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –±–æ—Ç–æ–≤ —Ç–∏–ø–∞: {}", type, e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
     */
    @GetMapping("/active")
    public ResponseEntity<List<BotEntityDto>> getActiveBots() {
        try {
            LOGGER.info("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤");
            List<BotEntity> bots = botService.findActiveBots();
            List<BotEntityDto> dtos = bots.stream()
                    .map(BotEntityDto::fromEntity)
                    .collect(Collectors.toList());
            
            LOGGER.info("‚úÖ –ù–∞–π–¥–µ–Ω–æ {} –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤", dtos.size());
            return ResponseEntity.ok(dtos);
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –±–æ—Ç–∞ –ø–æ –∏–º–µ–Ω–∏
     */
    @GetMapping("/name/{name}")
    public ResponseEntity<BotEntityDto> getBotByName(@PathVariable String name) {
        try {
            LOGGER.info("üîç –ü–æ–∏—Å–∫ –±–æ—Ç–∞ –ø–æ –∏–º–µ–Ω–∏: {}", name);
            
            List<BotEntity> bots = botService.findAll();
            BotEntity targetBot = bots.stream()
                    .filter(bot -> name.equals(bot.getName()))
                    .findFirst()
                    .orElse(null);
            
            if (targetBot == null) {
                LOGGER.warn("‚ö†Ô∏è –ë–æ—Ç —Å –∏–º–µ–Ω–µ–º '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω", name);
                return ResponseEntity.notFound().build();
            }
            
            BotEntityDto dto = BotEntityDto.fromEntity(targetBot);
            LOGGER.info("‚úÖ –ë–æ—Ç –Ω–∞–π–¥–µ–Ω: {}", dto.getName());
            return ResponseEntity.ok(dto);
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –±–æ—Ç–∞ —Å –∏–º–µ–Ω–µ–º: {}", name, e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å miniapp –¥–ª—è –±–æ—Ç–∞ –ø–æ –∏–º–µ–Ω–∏
     */
    @PatchMapping("/{name}/miniapp")
    public ResponseEntity<BotEntityDto> updateMiniapp(@PathVariable String name, @RequestBody String miniappUrl) {
        try {
            LOGGER.info("üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ miniapp –¥–ª—è –±–æ—Ç–∞ '{}': {}", name, miniappUrl);
            
            // –ù–∞—Ö–æ–¥–∏–º –±–æ—Ç–∞ –ø–æ –∏–º–µ–Ω–∏
            List<BotEntity> bots = botService.findAll();
            BotEntity targetBot = bots.stream()
                    .filter(bot -> name.equals(bot.getName()))
                    .findFirst()
                    .orElse(null);
            
            if (targetBot == null) {
                LOGGER.warn("‚ö†Ô∏è –ë–æ—Ç —Å –∏–º–µ–Ω–µ–º '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω", name);
                return ResponseEntity.notFound().build();
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º miniapp
            targetBot.setMiniapp(miniappUrl);
            BotEntity updatedBot = botService.save(targetBot);
            
            BotEntityDto dto = BotEntityDto.fromEntity(updatedBot);
            LOGGER.info("‚úÖ Miniapp –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –±–æ—Ç–∞ '{}': {}", name, miniappUrl);
            return ResponseEntity.ok(dto);
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ miniapp –¥–ª—è –±–æ—Ç–∞ '{}'", name, e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
     */
    @PostMapping
    public ResponseEntity<BotEntityDto> createBot(@RequestBody BotEntityDto botDto) {
        try {
            LOGGER.info("‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞: {}", botDto.getName());
            
            if (botDto.getName() == null || botDto.getUsername() == null || botDto.getToken() == null || botDto.getType() == null) {
                LOGGER.warn("‚ö†Ô∏è –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞");
                return ResponseEntity.badRequest().build();
            }
            
            BotEntity newBot = new BotEntity();
            newBot.setName(botDto.getName());
            newBot.setUsername(botDto.getUsername());
            newBot.setToken(botDto.getToken());
            newBot.setType(botDto.getType());
            newBot.setPrompt(botDto.getPrompt());
            newBot.setWebhookUrl(botDto.getWebhookUrl());
            newBot.setDescription(botDto.getDescription());
            newBot.setTriggers(botDto.getTriggers());
            newBot.setMemWindow(botDto.getMemWindow());
            newBot.setMiniapp(botDto.getMiniapp());
            newBot.setIsActive(botDto.getIsActive() != null ? botDto.getIsActive() : true);
            
            BotEntity savedBot = botService.save(newBot);
            BotEntityDto createdDto = BotEntityDto.fromEntity(savedBot);
            
            LOGGER.info("‚úÖ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {}", createdDto.getId());
            return ResponseEntity.status(HttpStatus.CREATED).body(createdDto);
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ—Ç–∞
     */
    @PutMapping("/{id}")
    public ResponseEntity<BotEntityDto> updateBot(@PathVariable Long id, @RequestBody BotEntityDto botDto) {
        try {
            LOGGER.info("‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ —Å ID: {}", id);
            
            BotEntity existingBot = botService.findById(id);
            if (existingBot == null) {
                LOGGER.warn("‚ö†Ô∏è –ë–æ—Ç —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", id);
                return ResponseEntity.notFound().build();
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
            if (botDto.getName() != null) {
                existingBot.setName(botDto.getName());
            }
            if (botDto.getUsername() != null) {
                existingBot.setUsername(botDto.getUsername());
            }
            if (botDto.getToken() != null) {
                existingBot.setToken(botDto.getToken());
            }
            if (botDto.getType() != null) {
                existingBot.setType(botDto.getType());
            }
            if (botDto.getPrompt() != null) {
                existingBot.setPrompt(botDto.getPrompt());
            }
            if (botDto.getWebhookUrl() != null) {
                existingBot.setWebhookUrl(botDto.getWebhookUrl());
            }
            if (botDto.getDescription() != null) {
                existingBot.setDescription(botDto.getDescription());
            }
            if (botDto.getTriggers() != null) {
                existingBot.setTriggers(botDto.getTriggers());
            }
            if (botDto.getMemWindow() != null) {
                existingBot.setMemWindow(botDto.getMemWindow());
            }
            if (botDto.getMiniapp() != null) {
                existingBot.setMiniapp(botDto.getMiniapp());
            }
            if (botDto.getIsActive() != null) {
                existingBot.setIsActive(botDto.getIsActive());
            }
            
            BotEntity updatedBot = botService.save(existingBot);
            BotEntityDto updatedDto = BotEntityDto.fromEntity(updatedBot);
            
            LOGGER.info("‚úÖ –ë–æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: {}", updatedDto.getName());
            return ResponseEntity.ok(updatedDto);
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞ —Å ID: {}", id, e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ miniapp –¥–ª—è –±–æ—Ç–∞ –ø–æ ID
     */
    @PatchMapping("/{id}/miniapp")
    public ResponseEntity<BotEntityDto> updateBotMiniapp(@PathVariable Long id, @RequestBody String miniappUrl) {
        try {
            LOGGER.info("üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ miniapp –¥–ª—è –±–æ—Ç–∞ —Å ID {}: {}", id, miniappUrl);
            
            BotEntity existingBot = botService.findById(id);
            if (existingBot == null) {
                LOGGER.warn("‚ö†Ô∏è –ë–æ—Ç —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω", id);
                return ResponseEntity.notFound().build();
            }
            
            existingBot.setMiniapp(miniappUrl);
            BotEntity updatedBot = botService.save(existingBot);
            BotEntityDto updatedDto = BotEntityDto.fromEntity(updatedBot);
            
            LOGGER.info("‚úÖ Miniapp –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –±–æ—Ç–∞ —Å ID {}: {}", id, miniappUrl);
            return ResponseEntity.ok(updatedDto);
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ miniapp –¥–ª—è –±–æ—Ç–∞ —Å ID: {}", id, e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
    
    /**
     * –£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteBot(@PathVariable Long id) {
        try {
            LOGGER.info("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –±–æ—Ç–∞ —Å ID: {}", id);
            
            BotEntity existingBot = botService.findById(id);
            if (existingBot == null) {
                LOGGER.warn("‚ö†Ô∏è –ë–æ—Ç —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", id);
                return ResponseEntity.notFound().build();
            }
            
            botService.deleteById(id);
            LOGGER.info("‚úÖ –ë–æ—Ç —Å ID {} —É–¥–∞–ª–µ–Ω", id);
            return ResponseEntity.noContent().build();
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–æ—Ç–∞ —Å ID: {}", id, e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
}
