package com.example.dream_stream_bot.controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Profile;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.HashMap;
import java.util.Map;

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ –≤ dev –ø—Ä–æ—Ñ–∏–ª–µ)
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Swagger UI
 */
@RestController
@RequestMapping("/dev")
@Profile("dev")
@Tag(name = "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞", description = "–¢–µ—Å—Ç–æ–≤—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ –≤ dev –ø—Ä–æ—Ñ–∏–ª–µ)")
public class DevController {
    
    private static final Logger LOGGER = LoggerFactory.getLogger(DevController.class);
    
    @Value("${telegram.test.init-data:}")
    private String testInitData;
    
    @Value("${telegram.test.bot-name:}")
    private String testBotName;
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π initData –¥–ª—è Swagger UI
     */
    @GetMapping("/test-init-data")
    @Operation(
        summary = "–ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π initData",
        description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π initData –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Swagger UI (—Ç–æ–ª—å–∫–æ –≤ dev –ø—Ä–æ—Ñ–∏–ª–µ)"
    )
    @ApiResponse(responseCode = "200", description = "–¢–µ—Å—Ç–æ–≤—ã–π initData –ø–æ–ª—É—á–µ–Ω",
        content = @Content(schema = @Schema(implementation = Map.class),
            examples = @ExampleObject(value = """
                {
                    "initData": "query_id=AAHdF6IQAAAAAN0XohDhrOrc&user=%7B%22id%22%3A123456789%7D&auth_date=1640995200&hash=test_hash_for_development_only",
                    "botName": "StickerGallery",
                    "message": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç initData –≤ Swagger UI –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API"
                }
                """)))
    public ResponseEntity<Map<String, Object>> getTestInitData() {
        LOGGER.info("üîß –ó–∞–ø—Ä–æ—Å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ initData –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏");
        
        Map<String, Object> response = new HashMap<>();
        response.put("initData", testInitData);
        response.put("botName", testBotName);
        response.put("message", "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç initData –≤ Swagger UI –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API");
        response.put("warning", "–í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!");
        
        return ResponseEntity.ok(response);
    }
    
    /**
     * –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
     */
    @GetMapping("/debug-headers")
    @Operation(
        summary = "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤",
        description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"
    )
    @ApiResponse(responseCode = "200", description = "–ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã")
    public ResponseEntity<Map<String, Object>> debugHeaders(jakarta.servlet.http.HttpServletRequest request) {
        LOGGER.info("üîß –ó–∞–ø—Ä–æ—Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤");
        
        Map<String, Object> response = new HashMap<>();
        Map<String, String> headers = new HashMap<>();
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        java.util.Enumeration<String> headerNames = request.getHeaderNames();
        while (headerNames.hasMoreElements()) {
            String headerName = headerNames.nextElement();
            String headerValue = request.getHeader(headerName);
            headers.put(headerName, headerValue);
        }
        
        response.put("headers", headers);
        response.put("requestURI", request.getRequestURI());
        response.put("method", request.getMethod());
        response.put("timestamp", System.currentTimeMillis());
        
        return ResponseEntity.ok(response);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ dev –ø—Ä–æ—Ñ–∏–ª–µ
     */
    @GetMapping("/info")
    @Operation(
        summary = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ dev –ø—Ä–æ—Ñ–∏–ª–µ",
        description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö dev –ø—Ä–æ—Ñ–∏–ª—è"
    )
    @ApiResponse(responseCode = "200", description = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞")
    public ResponseEntity<Map<String, Object>> getDevInfo() {
        LOGGER.info("üîß –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ dev –ø—Ä–æ—Ñ–∏–ª–µ");
        
        Map<String, Object> response = new HashMap<>();
        response.put("profile", "dev");
        response.put("testInitDataAvailable", testInitData != null && !testInitData.isEmpty());
        response.put("testBotName", testBotName);
        response.put("swaggerUrl", "/swagger-ui.html");
        response.put("openApiUrl", "/v3/api-docs");
        
        return ResponseEntity.ok(response);
    }
}
