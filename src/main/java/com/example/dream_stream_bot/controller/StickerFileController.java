package com.example.dream_stream_bot.controller;

import com.example.dream_stream_bot.dto.StickerCacheDto;
import com.example.dream_stream_bot.service.file.StickerCacheService;
import com.example.dream_stream_bot.service.file.TelegramFileService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.CacheControl;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.concurrent.TimeUnit;

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤
 */
@RestController
@RequestMapping("/stickers")
@CrossOrigin(origins = "*", methods = {RequestMethod.GET}) // CORS –¥–ª—è —Ñ–∞–π–ª–æ–≤
@Tag(name = "–§–∞–π–ª—ã —Å—Ç–∏–∫–µ—Ä–æ–≤", description = "–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å—Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ Telegram")
public class StickerFileController {
    
    private static final Logger LOGGER = LoggerFactory.getLogger(StickerFileController.class);
    
    private final StickerCacheService cacheService;
    private final TelegramFileService telegramFileService;
    
    @Autowired
    public StickerFileController(StickerCacheService cacheService, 
                                TelegramFileService telegramFileService) {
        this.cacheService = cacheService;
        this.telegramFileService = telegramFileService;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª —Å—Ç–∏–∫–µ—Ä–∞ –ø–æ file_id
     */
    @GetMapping("/{fileId}")
    @Operation(
        summary = "–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª —Å—Ç–∏–∫–µ—Ä–∞",
        description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∞–π–ª —Å—Ç–∏–∫–µ—Ä–∞ –ø–æ –µ–≥–æ Telegram file_id. " +
                     "–§–∞–π–ª –∫—ç—à–∏—Ä—É–µ—Ç—Å—è –≤ Redis –Ω–∞ 7 –¥–Ω–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞. " +
                     "–ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ —Ñ–∞–π–ª —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è –∏–∑ Telegram Bot API."
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "–§–∞–π–ª —Å—Ç–∏–∫–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω",
            content = @Content(
                mediaType = "image/webp",
                schema = @Schema(type = "string", format = "binary")
            )),
        @ApiResponse(responseCode = "400", description = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π file_id"),
        @ApiResponse(responseCode = "404", description = "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Telegram"),
        @ApiResponse(responseCode = "413", description = "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>512KB)"),
        @ApiResponse(responseCode = "429", description = "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Telegram API"),
        @ApiResponse(responseCode = "500", description = "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Redis/Telegram API")
    })
    public ResponseEntity<byte[]> getStickerFile(
            @Parameter(description = "Telegram file_id —Å—Ç–∏–∫–µ—Ä–∞", required = true, 
                      example = "CAACAgIAAxUAAWjHyNMRV143tmm6eW9_cqvr55qDAAIrXAACwQvZSjeyL1mWGuz7NgQ")
            @PathVariable 
            @NotBlank(message = "file_id –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            @Pattern(regexp = "^[A-Za-z0-9_-]{10,100}$", 
                    message = "file_id –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _ –∏ - (10-100 —Å–∏–º–≤–æ–ª–æ–≤)")
            String fileId,
            
            @Parameter(description = "–ò–º—è –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞", example = "StickerGallery")
            @RequestParam(defaultValue = "StickerGallery") String botName) {
        
        try {
            LOGGER.info("üìÅ –ó–∞–ø—Ä–æ—Å —Ñ–∞–π–ª–∞ —Å—Ç–∏–∫–µ—Ä–∞: fileId={}, botName={}", fileId, botName);
            
            // 1. –í–∞–ª–∏–¥–∞—Ü–∏—è file_id
            if (!telegramFileService.isValidFileId(fileId)) {
                LOGGER.warn("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π file_id: {}", fileId);
                return ResponseEntity.badRequest().build();
            }
            
            // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à Redis (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            StickerCacheDto cached = null;
            if (cacheService.isRedisAvailable()) {
                cached = cacheService.get(fileId);
                if (cached != null) {
                    LOGGER.debug("üéØ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ: {} –±–∞–π—Ç", cached.getFileSize());
                    return buildFileResponse(cached, true);
                }
            } else {
                LOGGER.warn("‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è");
            }
            
            // 3. –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑ Telegram API
            LOGGER.debug("üì• –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ, —Å–∫–∞—á–∏–≤–∞–µ–º –∏–∑ Telegram...");
            StickerCacheDto downloaded = telegramFileService.downloadFile(fileId, botName);
            
            // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à (–µ—Å–ª–∏ Redis –¥–æ—Å—Ç—É–ø–µ–Ω)
            if (cacheService.isRedisAvailable()) {
                cacheService.put(downloaded);
            }
            
            // 5. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª
            LOGGER.info("‚úÖ –§–∞–π–ª —Å—Ç–∏–∫–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω: {} –±–∞–π—Ç, MIME: {}", 
                       downloaded.getFileSize(), downloaded.getMimeType());
            
            return buildFileResponse(downloaded, false);
            
        } catch (IllegalArgumentException e) {
            LOGGER.warn("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ñ–∞–π–ª–∞ '{}': {}", fileId, e.getMessage());
            return ResponseEntity.badRequest().build();
            
        } catch (RuntimeException e) {
            String message = e.getMessage();
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ Telegram API
            if (message.contains("file not found") || message.contains("FILE_ID_INVALID")) {
                LOGGER.warn("üìÇ –§–∞–π–ª '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Telegram", fileId);
                return ResponseEntity.notFound().build();
            }
            
            if (message.contains("—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π")) {
                LOGGER.warn("üìè –§–∞–π–ª '{}' —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π", fileId);
                return ResponseEntity.status(HttpStatus.PAYLOAD_TOO_LARGE).build();
            }
            
            if (message.contains("Too Many Requests") || message.contains("429")) {
                LOGGER.warn("üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Telegram API –¥–ª—è —Ñ–∞–π–ª–∞ '{}'", fileId);
                return ResponseEntity.status(HttpStatus.TOO_MANY_REQUESTS).build();
            }
            
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ '{}': {}", fileId, e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
            
        } catch (Exception e) {
            LOGGER.error("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ '{}': {}", fileId, e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤
     */
    @GetMapping("/cache/stats")
    @Operation(
        summary = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤",
        description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫—ç—à–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤ Redis"
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞"),
        @ApiResponse(responseCode = "500", description = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    })
    public ResponseEntity<CacheStatsResponse> getCacheStats() {
        try {
            long cacheSize = cacheService.getCacheSize();
            boolean redisAvailable = cacheService.isRedisAvailable();
            
            CacheStatsResponse stats = new CacheStatsResponse(cacheSize, redisAvailable);
            
            LOGGER.debug("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞: —Ä–∞–∑–º–µ—Ä={}, Redis –¥–æ—Å—Ç—É–ø–µ–Ω={}", cacheSize, redisAvailable);
            
            return ResponseEntity.ok(stats);
            
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç HTTP –æ—Ç–≤–µ—Ç —Å —Ñ–∞–π–ª–æ–º —Å—Ç–∏–∫–µ—Ä–∞
     */
    private ResponseEntity<byte[]> buildFileResponse(StickerCacheDto stickerCache, boolean fromCache) {
        byte[] fileData = stickerCache.getFileBytes();
        
        return ResponseEntity.ok()
                .header(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN, "*") // CORS
                .header("X-Cache-Status", fromCache ? "HIT" : "MISS") // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                .cacheControl(CacheControl.maxAge(7, TimeUnit.DAYS).cachePublic()) // –ö—ç—à –≤ –±—Ä–∞—É–∑–µ—Ä–µ
                .contentType(MediaType.parseMediaType(stickerCache.getMimeType()))
                .contentLength(fileData.length)
                .body(fileData);
    }
    
    /**
     * DTO –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
     */
    public record CacheStatsResponse(
            @Schema(description = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –≤ –∫—ç—à–µ", example = "156") 
            long cachedFilesCount,
            
            @Schema(description = "–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Redis", example = "true") 
            boolean redisAvailable
    ) {}
}
