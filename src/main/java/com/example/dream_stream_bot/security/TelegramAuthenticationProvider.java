package com.example.dream_stream_bot.security;

import com.example.dream_stream_bot.dto.TelegramInitData;
import com.example.dream_stream_bot.model.user.UserEntity;
import com.example.dream_stream_bot.service.user.UserService;
import com.example.dream_stream_bot.util.TelegramInitDataValidator;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.stereotype.Component;

/**
 * –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è Telegram
 */
@Component
public class TelegramAuthenticationProvider implements AuthenticationProvider {
    
    private static final Logger LOGGER = LoggerFactory.getLogger(TelegramAuthenticationProvider.class);
    
    private final TelegramInitDataValidator validator;
    private final UserService userService;
    
    @Autowired
    public TelegramAuthenticationProvider(TelegramInitDataValidator validator, UserService userService) {
        this.validator = validator;
        this.userService = userService;
    }
    
    @Override
    public Authentication authenticate(Authentication authentication) throws AuthenticationException {
        if (!supports(authentication.getClass())) {
            LOGGER.debug("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {}", authentication.getClass().getSimpleName());
            return null;
        }
        
        TelegramAuthenticationToken token = (TelegramAuthenticationToken) authentication;
        String initData = token.getInitData();
        Long telegramId = token.getTelegramId();
        String botName = token.getBotName();
        
        LOGGER.info("üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å telegram_id: {} –¥–ª—è –±–æ—Ç–∞: {}", telegramId, botName);
        LOGGER.debug("üîç –î–µ—Ç–∞–ª–∏ —Ç–æ–∫–µ–Ω–∞: initData length={}, telegramId={}, botName={}", 
                initData != null ? initData.length() : 0, telegramId, botName);
        
        try {
            // –í–∞–ª–∏–¥–∏—Ä—É–µ–º initData –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
            LOGGER.debug("üîç –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é initData –¥–ª—è telegram_id: {} –∏ –±–æ—Ç–∞: {}", telegramId, botName);
            if (!validator.validateInitData(initData, botName)) {
                LOGGER.warn("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è initData –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {} –∏ –±–æ—Ç–∞: {}", telegramId, botName);
                return null;
            }
            LOGGER.debug("‚úÖ InitData –≤–∞–ª–∏–¥–Ω–∞ –¥–ª—è telegram_id: {} –∏ –±–æ—Ç–∞: {}", telegramId, botName);
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ initData
            LOGGER.debug("üîç –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ initData");
            TelegramInitData.TelegramUser telegramUser = extractTelegramUser(initData);
            if (telegramUser == null) {
                LOGGER.warn("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ initData");
                return null;
            }
            LOGGER.debug("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: id={}, username={}, firstName={}, lastName={}", 
                    telegramUser.getId(), telegramUser.getUsername(), telegramUser.getFirstName(), telegramUser.getLastName());
            
            // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            LOGGER.debug("üîç –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
            UserEntity user = userService.findOrCreateByTelegramId(
                    telegramUser.getId(),
                    telegramUser.getUsername(),
                    telegramUser.getFirstName(),
                    telegramUser.getLastName(),
                    telegramUser.getPhotoUrl()
            );
            LOGGER.debug("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω/—Å–æ–∑–¥–∞–Ω: id={}, username={}, role={}", 
                    user.getId(), user.getUsername(), user.getRole());
            
            // –°–æ–∑–¥–∞–µ–º authorities –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            LOGGER.debug("üîç –°–æ–∑–¥–∞–µ–º authorities –¥–ª—è —Ä–æ–ª–∏: {}", user.getRole());
            var authorities = TelegramAuthenticationToken.createAuthorities(user);
            LOGGER.debug("‚úÖ –°–æ–∑–¥–∞–Ω—ã authorities: {}", authorities);
            
            // –°–æ–∑–¥–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
            TelegramAuthenticationToken authenticatedToken = new TelegramAuthenticationToken(
                    user, initData, telegramId, botName, authorities
            );
            LOGGER.debug("‚úÖ –°–æ–∑–¥–∞–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω");
            
            LOGGER.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: {} (—Ä–æ–ª—å: {}) –¥–ª—è –±–æ—Ç–∞: {}", 
                    user.getUsername(), user.getRole(), botName);
            
            return authenticatedToken;
            
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –¥–ª—è –±–æ—Ç–∞ {}: {}", telegramId, botName, e.getMessage(), e);
            return null;
        }
    }
    
    @Override
    public boolean supports(Class<?> authentication) {
        return TelegramAuthenticationToken.class.isAssignableFrom(authentication);
    }
    
    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ initData
     * –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å JSON –ø–∞—Ä—Å–µ—Ä
     */
    private TelegramInitData.TelegramUser extractTelegramUser(String initData) {
        try {
            // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ObjectMapper –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º telegram_id
            Long telegramId = validator.extractTelegramId(initData);
            if (telegramId == null) {
                return null;
            }
            
            // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            String username = extractValue(initData, "username");
            String firstName = extractValue(initData, "first_name");
            String lastName = extractValue(initData, "last_name");
            String photoUrl = extractValue(initData, "photo_url");
            
            return new TelegramInitData.TelegramUser(
                    telegramId,
                    false, // isBot
                    firstName,
                    lastName,
                    username,
                    null, // languageCode
                    null, // isPremium
                    null, // addedToAttachmentMenu
                    null, // allowsWriteToPm
                    photoUrl
            );
            
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", e.getMessage(), e);
            return null;
        }
    }
    
    /**
     * –ü—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å—Ç—Ä–æ–∫–∏
     */
    private String extractValue(String initData, String fieldName) {
        try {
            int startIndex = initData.indexOf("\"" + fieldName + "\":\"");
            if (startIndex == -1) {
                return null;
            }
            
            startIndex = initData.indexOf("\"", startIndex + fieldName.length() + 3) + 1;
            int endIndex = initData.indexOf("\"", startIndex);
            
            if (endIndex == -1) {
                return null;
            }
            
            return initData.substring(startIndex, endIndex);
        } catch (Exception e) {
            return null;
        }
    }
}
