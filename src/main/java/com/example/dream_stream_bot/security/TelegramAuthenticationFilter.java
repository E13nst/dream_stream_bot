package com.example.dream_stream_bot.security;

import com.example.dream_stream_bot.util.TelegramInitDataValidator;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;

/**
 * –§–∏–ª—å—Ç—Ä –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram initData
 */
@Component
public class TelegramAuthenticationFilter extends OncePerRequestFilter {
    
    private static final Logger LOGGER = LoggerFactory.getLogger(TelegramAuthenticationFilter.class);
    private static final String TELEGRAM_INIT_DATA_HEADER = "X-Telegram-Init-Data";
    private static final String TELEGRAM_BOT_NAME_HEADER = "X-Telegram-Bot-Name";
    
    private final TelegramInitDataValidator validator;
    private final TelegramAuthenticationProvider authenticationProvider;
    
    @Autowired
    public TelegramAuthenticationFilter(TelegramInitDataValidator validator, 
                                       TelegramAuthenticationProvider authenticationProvider) {
        this.validator = validator;
        this.authenticationProvider = authenticationProvider;
    }
    
    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, 
                                  FilterChain filterChain) throws ServletException, IOException {
        
        String initData = request.getHeader(TELEGRAM_INIT_DATA_HEADER);
        String botName = request.getHeader(TELEGRAM_BOT_NAME_HEADER);
        
        LOGGER.debug("üîç TelegramAuthenticationFilter: –ó–∞–ø—Ä–æ—Å –∫ {} | InitData: {} | BotName: {}", 
                request.getRequestURI(), 
                initData != null ? "present" : "null", 
                botName != null ? botName : "null");
        
        if (initData != null && !initData.trim().isEmpty() && botName != null && !botName.trim().isEmpty()) {
            LOGGER.info("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ X-Telegram-Init-Data –∏ X-Telegram-Bot-Name –¥–ª—è –±–æ—Ç–∞: {}", botName);
            LOGGER.debug("üîç InitData (–ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤): {}", 
                    initData.length() > 50 ? initData.substring(0, 50) + "..." : initData);
            
            try {
                // –í–∞–ª–∏–¥–∏—Ä—É–µ–º initData –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
                LOGGER.debug("üîç –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é initData –¥–ª—è –±–æ—Ç–∞: {}", botName);
                if (!validator.validateInitData(initData, botName)) {
                    LOGGER.warn("‚ùå InitData –Ω–µ–≤–∞–ª–∏–¥–Ω–∞ –¥–ª—è –±–æ—Ç–∞: {}", botName);
                    filterChain.doFilter(request, response);
                    return;
                }
                LOGGER.debug("‚úÖ InitData –≤–∞–ª–∏–¥–Ω–∞ –¥–ª—è –±–æ—Ç–∞: {}", botName);
                
                // –ò–∑–≤–ª–µ–∫–∞–µ–º telegram_id –∏–∑ initData
                Long telegramId = validator.extractTelegramId(initData);
                LOGGER.debug("üîç –ò–∑–≤–ª–µ—á–µ–Ω telegram_id: {}", telegramId);
                
                if (telegramId != null) {
                    LOGGER.info("üîê –ü–æ–ø—ã—Ç–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è telegram_id: {} –∏ –±–æ—Ç–∞: {}", telegramId, botName);
                    
                    // –°–æ–∑–¥–∞–µ–º –Ω–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
                    TelegramAuthenticationToken token = new TelegramAuthenticationToken(initData, telegramId, botName);
                    LOGGER.debug("üîç –°–æ–∑–¥–∞–Ω TelegramAuthenticationToken –¥–ª—è telegram_id: {}", telegramId);
                    
                    // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
                    var authentication = authenticationProvider.authenticate(token);
                    LOGGER.debug("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {}", 
                            authentication != null ? authentication.isAuthenticated() : "null");
                    
                    if (authentication != null && authentication.isAuthenticated()) {
                        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
                        SecurityContextHolder.getContext().setAuthentication(authentication);
                        LOGGER.info("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è telegram_id: {} –∏ –±–æ—Ç–∞: {}", telegramId, botName);
                    } else {
                        LOGGER.warn("‚ùå –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è telegram_id: {} –∏ –±–æ—Ç–∞: {}", telegramId, botName);
                    }
                } else {
                    LOGGER.warn("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å telegram_id –∏–∑ initData –¥–ª—è –±–æ—Ç–∞: {}", botName);
                }
                
            } catch (Exception e) {
                LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞ {}: {}", botName, e.getMessage(), e);
            }
        } else {
            LOGGER.debug("üîç –ó–∞–≥–æ–ª–æ–≤–∫–∏ Telegram –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –ø—É—Å—Ç—ã | InitData: {} | BotName: {}", 
                    initData != null ? "present" : "null", 
                    botName != null ? botName : "null");
        }
        
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–µ–ø–æ—á–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filterChain.doFilter(request, response);
    }
    
    @Override
    protected boolean shouldNotFilter(HttpServletRequest request) throws ServletException {
        String path = request.getRequestURI();
        
        // –ù–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–µ—Å—É—Ä—Å–∞–º –∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–º —Å–∏—Å—Ç–µ–º–Ω—ã–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º
        return path.startsWith("/actuator/") || 
               path.startsWith("/error") ||
               path.equals("/") ||
               path.startsWith("/static/") ||
               path.startsWith("/css/") ||
               path.startsWith("/js/") ||
               path.startsWith("/images/") ||
               path.startsWith("/swagger-ui/") ||
               path.startsWith("/v3/api-docs");
    }
}
