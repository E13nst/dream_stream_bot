package com.example.dream_stream_bot.config;

import io.lettuce.core.RedisConnectionException;
import io.lettuce.core.api.StatefulRedisConnection;
import io.lettuce.core.api.sync.RedisCommands;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.connection.RedisStandaloneConfiguration;
import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;
import org.springframework.data.redis.serializer.StringRedisSerializer;
import org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration;
import io.lettuce.core.ClientOptions;
import io.lettuce.core.SslOptions;
import java.time.Duration;
import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Redis –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–æ–≤
 */
@Configuration
public class RedisConfig {

    private static final Logger LOGGER = LoggerFactory.getLogger(RedisConfig.class);

    @Value("${spring.data.redis.host:redis-e13nst.amvera.io}")
    private String redisHost;

    @Value("${spring.data.redis.port:6379}")
    private int redisPort;

    @Value("${spring.data.redis.password:}")
    private String redisPassword;

    @Value("${spring.data.redis.database:0}")
    private int redisDatabase;

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis —Å –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
     * –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–µ–∫—à–∏–º–∏ –∏ —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏
     */
    @Bean
    public LettuceConnectionFactory redisConnectionFactory() {
        LOGGER.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Redis —Å –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤");
        LOGGER.info("üìç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {}:{}, database: {}", redisHost, redisPort, redisDatabase);
        
        RedisStandaloneConfiguration configuration = new RedisStandaloneConfiguration();
        configuration.setHostName(redisHost);
        configuration.setPort(redisPort);
        configuration.setDatabase(redisDatabase);
        
        if (redisPassword != null && !redisPassword.trim().isEmpty()) {
            configuration.setPassword(redisPassword);
            LOGGER.info("üîê Redis –ø–∞—Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        } else {
            LOGGER.info("üîì Redis –ø–∞—Ä–æ–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        }
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL —Å –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
        SslOptions sslOptions = SslOptions.builder()
                .jdkSslProvider()
                .build();
        
        ClientOptions clientOptions = ClientOptions.builder()
                .sslOptions(sslOptions)
                .build();
        
        LettuceClientConfiguration clientConfig = LettuceClientConfiguration.builder()
                .commandTimeout(Duration.ofSeconds(10))
                .clientOptions(clientOptions)
                .useSsl()
                .disablePeerVerification()  // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
                .build();
        
        LOGGER.info("üîí SSL –≤–∫–ª—é—á–µ–Ω —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤");
        
        LettuceConnectionFactory factory = new LettuceConnectionFactory(configuration, clientConfig);
        factory.setValidateConnection(false);
        
        LOGGER.info("üè≠ LettuceConnectionFactory —Å–æ–∑–¥–∞–Ω");
        return factory;
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Redis Template –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∏–∫–µ—Ä–∞–º–∏
     */
    @Bean(name = "stickerRedisTemplate")
    public RedisTemplate<String, Object> stickerRedisTemplate(RedisConnectionFactory connectionFactory) {
        LOGGER.info("üîß –°–æ–∑–¥–∞–µ–º stickerRedisTemplate");
        
        RedisTemplate<String, Object> template = new RedisTemplate<>();
        template.setConnectionFactory(connectionFactory);
        
        // –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª—é—á–µ–π –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
        template.setKeySerializer(new StringRedisSerializer());
        template.setHashKeySerializer(new StringRedisSerializer());
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Jackson –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Java 8 date/time
        ObjectMapper objectMapper = new ObjectMapper();
        objectMapper.registerModule(new com.fasterxml.jackson.datatype.jsr310.JavaTimeModule());
        objectMapper.disable(com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
        
        // –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –∫–∞–∫ JSON
        template.setValueSerializer(new GenericJackson2JsonRedisSerializer(objectMapper));
        template.setHashValueSerializer(new GenericJackson2JsonRedisSerializer(objectMapper));
        
        template.afterPropertiesSet();
        
        LOGGER.info("‚úÖ stickerRedisTemplate —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ");
        return template;
    }
}