package com.example.dream_stream_bot.bot;

import com.example.dream_stream_bot.model.telegram.BotEntity;
import com.example.dream_stream_bot.service.telegram.MessageHandlerService;
import com.example.dream_stream_bot.service.telegram.StickerService;

import com.example.dream_stream_bot.service.telegram.UserStateService;
import com.example.dream_stream_bot.service.telegram.StickerPackService;
import com.example.dream_stream_bot.model.keyboard.InlineKeyboardMarkupBuilder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.springframework.beans.factory.annotation.Autowired;
import com.example.dream_stream_bot.model.telegram.StickerPack;

import java.util.List;
import java.util.ArrayList;

public class StickerBot extends AbstractTelegramBot {
    
    private final StickerService stickerService;
    private static final Logger LOGGER = LoggerFactory.getLogger(StickerBot.class);
    
    private final UserStateService userStateService;
    private final StickerPackService stickerPackService;
    
    public StickerBot(BotEntity botEntity, MessageHandlerService messageHandlerService, 
                     UserStateService userStateService, StickerPackService stickerPackService,
                     StickerService stickerService) {
        super(botEntity, messageHandlerService);
        this.stickerService = stickerService;
        this.userStateService = userStateService;
        this.stickerPackService = stickerPackService;
    }

    @Override
    public void onUpdateReceived(Update update) {
        // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if (update.hasMessage()) {
            Message msg = update.getMessage();
            LOGGER.info("üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ | ChatId: {} | –¢–∏–ø: {} | HasPhoto: {} | HasDocument: {} | HasText: {} | HasSticker: {} | HasVideo: {} | HasAudio: {} | Text: '{}'", 
                    msg.getChatId(),
                    msg.hasPhoto() ? "PHOTO" : msg.hasDocument() ? "DOCUMENT" : msg.hasText() ? "TEXT" : msg.hasSticker() ? "STICKER" : msg.hasVideo() ? "VIDEO" : msg.hasAudio() ? "AUDIO" : "OTHER",
                    msg.hasPhoto(),
                    msg.hasDocument(),
                    msg.hasText(),
                    msg.hasSticker(),
                    msg.hasVideo(),
                    msg.hasAudio(),
                    msg.hasText() ? msg.getText() : "N/A");
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–æ–≤ –æ—Ç inline –∫–Ω–æ–ø–æ–∫
        if (update.hasCallbackQuery()) {
            String callbackData = update.getCallbackQuery().getData();
            Long chatId = update.getCallbackQuery().getMessage().getChatId();
            LOGGER.info("üîò –ü–æ–ª—É—á–µ–Ω callback | ChatId: {} | Data: {}", chatId, callbackData);
            
            if ("—Å–æ–∑–¥–∞—Ç—å_–Ω–æ–≤—ã–π_–Ω–∞–±–æ—Ä".equals(callbackData)) {
                // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞
                userStateService.setUserState(chatId, UserStateService.UserState.WAITING_FOR_PACK_TITLE);
                
                SendMessage infoMessage = SendMessage.builder()
                        .chatId(chatId)
                        .text("–í–≤–µ–¥–∏ –∏–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞:")
                        .build();
                sendWithLogging(infoMessage);
                return;
            } else if ("—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å_–Ω–∞–±–æ—Ä".equals(callbackData)) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–±–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                showUserStickerPacks(chatId, 0);
                return;
            } else if (callbackData.startsWith("pack_")) {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞
                handlePackSelection(chatId, callbackData);
                return;
            } else if (callbackData.startsWith("page_")) {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                int page = Integer.parseInt(callbackData.substring(5));
                showUserStickerPacks(chatId, page);
                return;
            } else if ("back_to_main".equals(callbackData)) {
                // –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                showMainMenu(chatId);
                return;
            }
        }
        
        if (update.hasMessage()) {
            Message msg = update.getMessage();
            String conversationId = getConversationId(msg.getChatId());
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å (–¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤)
            boolean isGroup = msg.isGroupMessage() || msg.isSuperGroupMessage();
            if (isGroup) {
                boolean isReplyToBot = msg.getReplyToMessage() != null &&
                        msg.getReplyToMessage().getFrom() != null &&
                        msg.getReplyToMessage().getFrom().getUserName() != null &&
                        msg.getReplyToMessage().getFrom().getUserName().equalsIgnoreCase(getBotUsername());
                boolean isMention = msg.hasText() && msg.getText().toLowerCase().contains("@" + getBotUsername().toLowerCase());
                boolean isName = msg.hasText() && msg.getText().toLowerCase().contains(botEntity.getName().toLowerCase());
                boolean isAlias = msg.hasText() && botEntity.getBotTriggersList().stream().anyMatch(alias -> !alias.isEmpty() && msg.getText().toLowerCase().contains(alias.toLowerCase()));
                boolean isTrigger = msg.hasText() && botEntity.getBotTriggersList().stream().anyMatch(trigger -> !trigger.isEmpty() && msg.getText().toLowerCase().contains(trigger.toLowerCase()));
                
                if (!(isReplyToBot || isMention || isName || isAlias || isTrigger)) {
                    return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–æ—Ç—É
                }
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if (msg.hasPhoto() || msg.hasDocument()) {
                LOGGER.info("üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ | ChatId: {} | –¢–∏–ø: {}", msg.getChatId(), msg.hasPhoto() ? "PHOTO" : "DOCUMENT");
                
                // –ü–æ–ª—É—á–∞–µ–º name —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                String stickerPackName = null;
                try {
                    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä
                    Long selectedPackId = userStateService.getSelectedPackId(msg.getChatId());
                    if (selectedPackId != null) {
                        StickerPack selectedPack = stickerPackService.findById(selectedPackId);
                        if (selectedPack != null && selectedPack.getUserId().equals(msg.getChatId())) {
                            stickerPackName = selectedPack.getName();
                            LOGGER.info("üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: Name='{}', ID={}", 
                                    msg.getChatId(), stickerPackName, selectedPackId);
                        } else {
                            // –í—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –æ—á–∏—â–∞–µ–º
                            userStateService.clearSelectedPackId(msg.getChatId());
                            LOGGER.warn("‚ö†Ô∏è –í—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}, –æ—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä", msg.getChatId());
                        }
                    }
                    
                    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π
                    if (stickerPackName == null) {
                        List<StickerPack> userPacks = stickerPackService.findByUserId(msg.getChatId());
                        if (!userPacks.isEmpty()) {
                            // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ (—Å–∞–º—ã–π –Ω–æ–≤—ã–π)
                            StickerPack latestPack = userPacks.stream()
                                    .max((p1, p2) -> p1.getCreatedAt().compareTo(p2.getCreatedAt()))
                                    .orElse(userPacks.get(0));
                            stickerPackName = latestPack.getName();
                            LOGGER.info("üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: Name='{}', Created={}", 
                                    msg.getChatId(), stickerPackName, latestPack.getCreatedAt());
                        } else {
                            LOGGER.warn("‚ö†Ô∏è –°—Ç–∏–∫–µ—Ä–ø–∞–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", msg.getChatId());
                        }
                    }
                } catch (Exception e) {
                    LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", msg.getChatId(), e.getMessage());
                }
                
                SendMessage response = stickerService.handleImageMessage(msg, this, stickerPackName);
                if (response != null) {
                    sendWithLogging(response);
                }
                // –ï—Å–ª–∏ response == null, –∑–Ω–∞—á–∏—Ç —Å—Ç–∏–∫–µ—Ä —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ StickerService
            } else if (msg.hasText()) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                UserStateService.UserState currentState = userStateService.getUserState(msg.getChatId());
                
                if (currentState == UserStateService.UserState.WAITING_FOR_PACK_TITLE) {
                    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞
                    String title = msg.getText();
                    if (title.length() > 64) {
                        SendMessage errorMessage = SendMessage.builder()
                                .chatId(msg.getChatId())
                                .text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º 64 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                                .build();
                        sendWithLogging(errorMessage);
                        return;
                    }
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
                    UserStateService.StickerPackData packData = new UserStateService.StickerPackData();
                    packData.setTitle(title);
                    userStateService.setStickerPackData(msg.getChatId(), packData);
                    userStateService.setUserState(msg.getChatId(), UserStateService.UserState.WAITING_FOR_PACK_NAME);
                    
                    SendMessage nextStepMessage = SendMessage.builder()
                            .chatId(msg.getChatId())
                            .text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å—Å—ã–ª–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–∞–∫–µ—Ç–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤:\n\n" +
                                    "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –æ–∫–æ–Ω—á–∞–Ω–∏–µ '_by_StickerGalleryBot' –¥–æ–±–∞–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n" +
                                    "–ü—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ –≤–≤–µ–¥–µ—Ç–µ 'my_stickers', –ø–æ–ª—É—á–∏—Ç—Å—è 'my_stickers_by_StickerGalleryBot'")
                            .build();
                    sendWithLogging(nextStepMessage);
                    return;
                    
                } else if (currentState == UserStateService.UserState.WAITING_FOR_PACK_NAME) {
                    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∏–º—è —Å—Å—ã–ª–∫–∏ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞
                    String userInput = msg.getText();
                    
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ
                    String name = userInput;
                    if (!name.endsWith("_by_StickerGalleryBot")) {
                        name = userInput + "_by_StickerGalleryBot";
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏
                    StickerPack existingPack = stickerPackService.findByName(name);
                    if (existingPack != null) {
                        SendMessage errorMessage = SendMessage.builder()
                                .chatId(msg.getChatId())
                                .text("‚ùå –°—Ç–∏–∫–µ—Ä–ø–∞–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n\n" +
                                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è —Å—Å—ã–ª–∫–∏:")
                                .build();
                        sendWithLogging(errorMessage);
                        return;
                    }
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
                    UserStateService.StickerPackData packData = userStateService.getStickerPackData(msg.getChatId());
                    packData.setName(name);
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    StickerPack savedPack = stickerPackService.createStickerPack(
                        msg.getChatId(), packData.getTitle(), packData.getName());
                    LOGGER.info("üì¶ –°–æ–∑–¥–∞–Ω —Å—Ç–∏–∫–µ—Ä–ø–∞–∫: Title='{}', Name='{}', UserId={}, DB_ID={}", 
                            packData.getTitle(), packData.getName(), msg.getChatId(), savedPack.getId());
                    
                    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    userStateService.clearUserState(msg.getChatId());
                    
                    SendMessage successMessage = SendMessage.builder()
                            .chatId(msg.getChatId())
                            .text("‚úÖ –°—Ç–∏–∫–µ—Ä–ø–∞–∫ —Å–æ–∑–¥–∞–Ω!\n\n" +
                                    "üìù –ù–∞–∑–≤–∞–Ω–∏–µ: " + packData.getTitle() + "\n" +
                                    "üîó –ò–º—è: " + packData.getName() + "\n\n" +
                                    "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞!")
                            .build();
                    sendWithLogging(successMessage);
                    return;
                }
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                String text = msg.getText().toLowerCase();
                
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
                if (text.equals("/start")) {
                    InlineKeyboardMarkup keyboard = new InlineKeyboardMarkupBuilder()
                            .addRow("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–±–æ—Ä")
                            .build();
                    
                    SendMessage startMessage = SendMessage.builder()
                            .chatId(msg.getChatId())
                            .text("üéØ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ StickerBot!**\n\n" +
                                    "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å—Ç–∏–∫–µ—Ä—ã –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n\n" +
                                    "üì∏ **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n" +
                                    "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä' –∏–ª–∏\n" +
                                    "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (JPG, PNG, GIF)\n" +
                                    "‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç —Å—Ç–∏–∫–µ—Ä\n" +
                                    "‚Ä¢ –ì–æ—Ç–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç\n\n" +
                                    "üöÄ **–ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!**")
                            .parseMode("Markdown")
                            .replyMarkup(keyboard)
                            .build();
                    sendWithLogging(startMessage);
                    return;
                }
                
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä"
                if (text.equals("—Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä")) {
                    SendMessage infoMessage = SendMessage.builder()
                            .chatId(msg.getChatId())
                            .text("üì∏ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞!**\n\n" +
                                    "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, GIF")
                            .parseMode("Markdown")
                            .build();
                    sendWithLogging(infoMessage);
                    return;
                }
                

                
                if (text.contains("—Å—Ç–∏–∫–µ—Ä") || text.contains("sticker") || text.contains("help")) {
                    SendMessage helpMessage = SendMessage.builder()
                            .chatId(msg.getChatId())
                            .text("üéØ **StickerBot** - —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n" +
                                    "üì∏ **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n" +
                                    "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (JPG, PNG, GIF)\n" +
                                    "‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç —Å—Ç–∏–∫–µ—Ä\n" +
                                    "‚Ä¢ –ì–æ—Ç–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç\n\n" +
                                    "‚ö†Ô∏è **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é:**\n" +
                                    "‚Ä¢ –§–æ—Ä–º–∞—Ç: PNG, WebP\n" +
                                    "‚Ä¢ –†–∞–∑–º–µ—Ä: –¥–æ 512KB\n" +
                                    "‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ (512x512 –ø–∏–∫—Å–µ–ª–µ–π)\n\n" +
                                    "üöÄ **–ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å** - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!")
                            .parseMode("Markdown")
                            .build();
                    sendWithLogging(helpMessage);
                } else {
                    SendMessage infoMessage = SendMessage.builder()
                            .chatId(msg.getChatId())
                            .text("üéØ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞!\n\n" +
                                    "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, GIF")
                            .build();
                    sendWithLogging(infoMessage);
                }
            } else if (msg.hasSticker()) {
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∏–∫–µ—Ä—ã
                LOGGER.info("üé≠ –ü–æ–ª—É—á–µ–Ω —Å—Ç–∏–∫–µ—Ä | ChatId: {} | Emoji: {}", msg.getChatId(), msg.getSticker().getEmoji());
                SendMessage response = SendMessage.builder()
                        .chatId(msg.getChatId())
                        .text("üé≠ –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å—Ç–∏–∫–µ—Ä! –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç).")
                        .build();
                sendWithLogging(response);
            } else if (msg.hasVideo() || msg.hasAudio()) {
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ
                LOGGER.info("üé¨ –ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ/–∞—É–¥–∏–æ | ChatId: {} | –¢–∏–ø: {}", msg.getChatId(), msg.hasVideo() ? "VIDEO" : "AUDIO");
                SendMessage response = SendMessage.builder()
                        .chatId(msg.getChatId())
                        .text("üé¨ –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç), –∞ –Ω–µ –≤–∏–¥–µ–æ/–∞—É–¥–∏–æ.")
                        .build();
                sendWithLogging(response);
            } else {
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
                LOGGER.info("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è | ChatId: {} | –¢–∏–ø: OTHER", msg.getChatId());
                SendMessage response = SendMessage.builder()
                        .chatId(msg.getChatId())
                        .text("üì∏ –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç).\n\n" +
                                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, GIF")
                        .build();
                sendWithLogging(response);
            }
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
     */
    private void showMainMenu(Long chatId) {
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkupBuilder()
                .addRow("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–±–æ—Ä")
                .build();
        
        SendMessage mainMenuMessage = SendMessage.builder()
                .chatId(chatId)
                .text("üéØ **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é StickerBot**\n\n" +
                        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
                .parseMode("Markdown")
                .replyMarkup(keyboard)
                .build();
        
        sendWithLogging(mainMenuMessage);
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
     */
    private void showUserStickerPacks(Long chatId, int page) {
        try {
            List<StickerPack> userPacks = stickerPackService.findByUserId(chatId);
            
            if (userPacks.isEmpty()) {
                SendMessage noPacksMessage = SendMessage.builder()
                        .chatId(chatId)
                        .text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤ —Å—Ç–∏–∫–µ—Ä–æ–≤.\n\n" +
                                "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –Ω–∞–±–æ—Ä, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä'!")
                        .build();
                sendWithLogging(noPacksMessage);
                return;
            }
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            userPacks.sort((p1, p2) -> p2.getCreatedAt().compareTo(p1.getCreatedAt()));
            
            int itemsPerPage = 10;
            int totalPages = (userPacks.size() + itemsPerPage - 1) / itemsPerPage;
            int startIndex = page * itemsPerPage;
            int endIndex = Math.min(startIndex + itemsPerPage, userPacks.size());
            
            // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–±–æ—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            List<StickerPack> pagePacks = userPacks.subList(startIndex, endIndex);
            
            // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–±–æ—Ä–∞–º–∏
            InlineKeyboardMarkupBuilder keyboardBuilder = new InlineKeyboardMarkupBuilder();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–±–æ—Ä–∞
            for (StickerPack pack : pagePacks) {
                String buttonText = String.format("üì¶ %s", 
                    pack.getTitle().length() > 20 ? pack.getTitle().substring(0, 17) + "..." : pack.getTitle());
                keyboardBuilder.addRow(buttonText, "pack_" + pack.getId());
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
            if (totalPages > 1) {
                if (page > 0) {
                    keyboardBuilder.addRow("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", "page_" + (page - 1));
                }
                if (page < totalPages - 1) {
                    keyboardBuilder.addRow("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", "page_" + (page + 1));
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                keyboardBuilder.addRow("üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ " + (page + 1) + " –∏–∑ " + totalPages);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboardBuilder.addRow("üîô –ù–∞–∑–∞–¥", "back_to_main");
            
            String messageText = String.format("üìã **–í–∞—à–∏ –Ω–∞–±–æ—Ä—ã —Å—Ç–∏–∫–µ—Ä–æ–≤**\n\n" +
                    "–í—Å–µ–≥–æ –Ω–∞–±–æ—Ä–æ–≤: %d\n" +
                    "–°—Ç—Ä–∞–Ω–∏—Ü–∞: %d –∏–∑ %d\n\n" +
                    "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–±–æ—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                    userPacks.size(), page + 1, totalPages);
            
            SendMessage packsListMessage = SendMessage.builder()
                    .chatId(chatId)
                    .text(messageText)
                    .parseMode("Markdown")
                    .replyMarkup(keyboardBuilder.build())
                    .build();
            
            sendWithLogging(packsListMessage);
            
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–∞–±–æ—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", chatId, e.getMessage());
            SendMessage errorMessage = SendMessage.builder()
                    .chatId(chatId)
                    .text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–∞–±–æ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    .build();
            sendWithLogging(errorMessage);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞
     */
    private void handlePackSelection(Long chatId, String callbackData) {
        try {
            Long packId = Long.parseLong(callbackData.substring(5));
            StickerPack pack = stickerPackService.findById(packId);
            
            if (pack == null) {
                SendMessage errorMessage = SendMessage.builder()
                        .chatId(chatId)
                        .text("‚ùå –ù–∞–±–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.")
                        .build();
                sendWithLogging(errorMessage);
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–±–æ—Ä –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if (!pack.getUserId().equals(chatId)) {
                SendMessage errorMessage = SendMessage.builder()
                        .chatId(chatId)
                        .text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –Ω–∞–±–æ—Ä—É.")
                        .build();
                sendWithLogging(errorMessage);
                return;
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä
            userStateService.setSelectedPackId(chatId, packId);
            
            SendMessage packSelectedMessage = SendMessage.builder()
                    .chatId(chatId)
                    .text(String.format("‚úÖ **–í—ã–±—Ä–∞–Ω –Ω–∞–±–æ—Ä:** %s\n\n" +
                            "üìù –ù–∞–∑–≤–∞–Ω–∏–µ: %s\n" +
                            "üîó –ò–º—è: %s\n\n" +
                            "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä –≤ —ç—Ç–æ—Ç –Ω–∞–±–æ—Ä!",
                            pack.getTitle(), pack.getTitle(), pack.getName()))
                    .parseMode("Markdown")
                    .build();
            
            sendWithLogging(packSelectedMessage);
            
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–∞–±–æ—Ä–∞ {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", callbackData, chatId, e.getMessage());
            SendMessage errorMessage = SendMessage.builder()
                    .chatId(chatId)
                    .text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–∞–±–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    .build();
            sendWithLogging(errorMessage);
        }
    }
} 