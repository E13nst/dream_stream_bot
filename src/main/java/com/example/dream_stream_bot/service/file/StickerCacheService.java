package com.example.dream_stream_bot.service.file;

import com.example.dream_stream_bot.dto.StickerCacheDto;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;

import java.util.concurrent.TimeUnit;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤ Redis
 */
@Service
public class StickerCacheService {
    
    private static final Logger LOGGER = LoggerFactory.getLogger(StickerCacheService.class);
    private static final String CACHE_KEY_PREFIX = "sticker:file:";
    private static final long CACHE_TTL_DAYS = 7; // 7 –¥–Ω–µ–π
    
    private final RedisTemplate<String, Object> redisTemplate;
    
    @Autowired
    public StickerCacheService(@Qualifier("stickerRedisTemplate") RedisTemplate<String, Object> redisTemplate) {
        this.redisTemplate = redisTemplate;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∏–∫–µ—Ä –∏–∑ –∫—ç—à–∞ –ø–æ file_id
     * 
     * @param fileId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞
     * @return StickerCacheDto –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
     */
    public StickerCacheDto get(String fileId) {
        LOGGER.info("üîç –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä '{}' –∏–∑ –∫—ç—à–∞", fileId);
        
        if (!isRedisAvailable()) {
            LOGGER.debug("‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫—ç—à –¥–ª—è '{}'", fileId);
            return null;
        }
        
        try {
            String key = buildCacheKey(fileId);
            Object cached = redisTemplate.opsForValue().get(key);
            
            if (cached instanceof StickerCacheDto stickerCache) {
                if (stickerCache.isExpired()) {
                    LOGGER.debug("‚è∞ –ö—ç—à —Å—Ç–∏–∫–µ—Ä–∞ '{}' —É—Å—Ç–∞—Ä–µ–ª, —É–¥–∞–ª—è–µ–º", fileId);
                    delete(fileId);
                    return null;
                }
                
                LOGGER.debug("‚úÖ –°—Ç–∏–∫–µ—Ä '{}' –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ (—Ä–∞–∑–º–µ—Ä: {} –±–∞–π—Ç)", fileId, stickerCache.getFileSize());
                return stickerCache;
            }
            
            LOGGER.debug("‚ùå –°—Ç–∏–∫–µ—Ä '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ", fileId);
            return null;
            
        } catch (Exception e) {
            LOGGER.warn("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–∞ '{}' –∏–∑ –∫—ç—à–∞: {}", fileId, e.getMessage());
            return null;
        }
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∏–∫–µ—Ä –≤ –∫—ç—à
     * 
     * @param stickerCache –¥–∞–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä–∞ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    public void put(StickerCacheDto stickerCache) {
        if (stickerCache == null || stickerCache.getFileId() == null) {
            LOGGER.warn("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å null —Å—Ç–∏–∫–µ—Ä –≤ –∫—ç—à");
            return;
        }
        
        LOGGER.info("üíæ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∏–∫–µ—Ä '{}' –≤ –∫—ç—à", stickerCache.getFileId());
        
        if (!isRedisAvailable()) {
            LOGGER.debug("‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à –¥–ª—è '{}'", stickerCache.getFileId());
            return;
        }
        
        try {
            String key = buildCacheKey(stickerCache.getFileId());
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å TTL
            redisTemplate.opsForValue().set(key, stickerCache, CACHE_TTL_DAYS, TimeUnit.DAYS);
            
            LOGGER.debug("üíæ –°—Ç–∏–∫–µ—Ä '{}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à (—Ä–∞–∑–º–µ—Ä: {} –±–∞–π—Ç, TTL: {} –¥–Ω–µ–π)", 
                    stickerCache.getFileId(), stickerCache.getFileSize(), CACHE_TTL_DAYS);
            
        } catch (Exception e) {
            LOGGER.warn("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–∞ '{}' –≤ –∫—ç—à: {}", 
                    stickerCache.getFileId(), e.getMessage());
        }
    }
    
    /**
     * –£–¥–∞–ª—è–µ—Ç —Å—Ç–∏–∫–µ—Ä –∏–∑ –∫—ç—à–∞
     * 
     * @param fileId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞
     */
    public void delete(String fileId) {
        try {
            String key = buildCacheKey(fileId);
            Boolean deleted = redisTemplate.delete(key);
            
            if (Boolean.TRUE.equals(deleted)) {
                LOGGER.debug("üóëÔ∏è –°—Ç–∏–∫–µ—Ä '{}' —É–¥–∞–ª–µ–Ω –∏–∑ –∫—ç—à–∞", fileId);
            } else {
                LOGGER.debug("‚ùå –°—Ç–∏–∫–µ—Ä '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", fileId);
            }
            
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–∞ '{}' –∏–∑ –∫—ç—à–∞: {}", fileId, e.getMessage(), e);
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞ –≤ –∫—ç—à–µ
     * 
     * @param fileId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞
     * @return true –µ—Å–ª–∏ —Å—Ç–∏–∫–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫—ç—à–µ
     */
    public boolean exists(String fileId) {
        try {
            String key = buildCacheKey(fileId);
            Boolean exists = redisTemplate.hasKey(key);
            return Boolean.TRUE.equals(exists);
            
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞ '{}': {}", fileId, e.getMessage(), e);
            return false;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∏–∫–µ—Ä–æ–≤)
     * 
     * @return –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤
     */
    public long getCacheSize() {
        if (!isRedisAvailable()) {
            LOGGER.debug("‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω");
            return -1;
        }
        
        try {
            var keys = redisTemplate.keys(CACHE_KEY_PREFIX + "*");
            return keys != null ? keys.size() : 0;
            
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞: {}", e.getMessage());
            return -1;
        }
    }
    
    /**
     * –û—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫—ç—à —Å—Ç–∏–∫–µ—Ä–æ–≤
     */
    public void clearAll() {
        try {
            var keys = redisTemplate.keys(CACHE_KEY_PREFIX + "*");
            if (keys != null && !keys.isEmpty()) {
                Long deleted = redisTemplate.delete(keys);
                LOGGER.info("üßπ –û—á–∏—â–µ–Ω –∫—ç—à —Å—Ç–∏–∫–µ—Ä–æ–≤: —É–¥–∞–ª–µ–Ω–æ {} –∑–∞–ø–∏—Å–µ–π", deleted);
            } else {
                LOGGER.info("üßπ –ö—ç—à —Å—Ç–∏–∫–µ—Ä–æ–≤ —É–∂–µ –ø—É—Å—Ç");
            }
            
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤: {}", e.getMessage(), e);
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–ª—é—á –¥–ª—è Redis
     */
    private String buildCacheKey(String fileId) {
        return CACHE_KEY_PREFIX + fileId;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Redis
     */
    public boolean isRedisAvailable() {
        try {
            LOGGER.debug("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Redis...");
            // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
            Boolean result = redisTemplate.hasKey("test_key");
            LOGGER.info("‚úÖ Redis –¥–æ—Å—Ç—É–ø–µ–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {}", result);
            return true;
        } catch (Exception e) {
            LOGGER.error("‚ùå Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {}", e.getMessage());
            LOGGER.debug("‚ùå –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞ Redis:", e);
            return false;
        }
    }
}
