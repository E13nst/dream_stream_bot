package com.example.dream_stream_bot.service.telegram;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.core.io.FileSystemResource;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;

import java.io.File;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API
 */
@Service
public class TelegramApiService {
    
    private static final Logger LOGGER = LoggerFactory.getLogger(TelegramApiService.class);
    
    private final RestTemplate restTemplate = new RestTemplate();
    private String botToken;
    
    public void setBotToken(String botToken) {
        this.botToken = botToken;
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ –≤ Telegram
     */
    public boolean createNewStickerSet(Long userId, File stickerFile, String name, String title, String emoji) {
        try {
            String url = apiUrl("createNewStickerSet");
            
            LOGGER.info("üéØ –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–∫–µ—Ä–ø–∞–∫: {} | Title: {} | UserId: {} | Emoji: {}", name, title, userId, emoji);
            LOGGER.info("üìÅ –§–∞–π–ª —Å—Ç–∏–∫–µ—Ä–∞: {} | –†–∞–∑–º–µ—Ä: {} bytes | –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {}", 
                    stickerFile.getAbsolutePath(), stickerFile.length(), stickerFile.exists());
            
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
            body.add("user_id", userId.toString());
            body.add("name", name);
            body.add("title", title);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º PNG —Ñ–æ—Ä–º–∞—Ç (—Å—Ç–∞–±–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
            body.add("png_sticker", new FileSystemResource(stickerFile));
            LOGGER.info("üìé –ò—Å–ø–æ–ª—å–∑—É–µ–º PNG —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å—Ç–∏–∫–µ—Ä–∞");
            
            body.add("emojis", emoji);
            
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.MULTIPART_FORM_DATA);
            
            HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(body, headers);
            
            LOGGER.info("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Telegram API: createNewStickerSet | Body keys: {}", body.keySet());
            
            ResponseEntity<String> response = restTemplate.postForEntity(url, requestEntity, String.class);
            
            LOGGER.info("üöÄ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –∫ Telegram API: createNewStickerSet | Status: {} | Response length: {}", 
                    response.getStatusCode(), response.getBody() != null ? response.getBody().length() : 0);
            
            String responseBody = response.getBody();
            LOGGER.info("üì¶ –û—Ç–≤–µ—Ç –æ—Ç Telegram (createNewStickerSet): {}", responseBody);
            
            return responseBody != null && responseBody.contains("\"ok\":true");
            
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞: {}", e.getMessage(), e);
            return false;
        }
    }
    
    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç–∏–∫–µ—Ä –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Å—Ç–∏–∫–µ—Ä–ø–∞–∫—É
     */
    public boolean addStickerToSet(Long userId, File stickerFile, String name, String emoji) {
        try {
            String url = apiUrl("addStickerToSet");
            
            LOGGER.info("‚ûï –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –∫ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫—É: {} | UserId: {} | Emoji: {}", name, userId, emoji);
            
            MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
            body.add("user_id", userId.toString());
            body.add("name", name);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º PNG —Ñ–æ—Ä–º–∞—Ç (—Å—Ç–∞–±–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
            body.add("png_sticker", new FileSystemResource(stickerFile));
            LOGGER.info("üìé –ò—Å–ø–æ–ª—å–∑—É–µ–º PNG —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞");
            
            body.add("emojis", emoji);
            
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.MULTIPART_FORM_DATA);
            
            HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(body, headers);
            
            LOGGER.info("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Telegram API: addStickerToSet | Body keys: {}", body.keySet());
            
            ResponseEntity<String> response = restTemplate.postForEntity(url, requestEntity, String.class);
            
            LOGGER.info("üöÄ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –∫ Telegram API: addStickerToSet | Status: {} | Response length: {}", 
                    response.getStatusCode(), response.getBody() != null ? response.getBody().length() : 0);
            
            String responseBody = response.getBody();
            LOGGER.info("üì¶ –û—Ç–≤–µ—Ç –æ—Ç Telegram (addStickerToSet): {}", responseBody);
            
            return responseBody != null && responseBody.contains("\"ok\":true");
            
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–∞: {}", e.getMessage(), e);
            return false;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–µ
     */
    public StickerSetInfo getStickerSetInfo(String stickerSetName) {
        try {
            String url = apiUrl("getStickerSet") + "&name=" + stickerSetName;
            LOGGER.info("üåê –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–µ: {}", url);
            
            ResponseEntity<String> response = restTemplate.getForEntity(url, String.class);
            
            LOGGER.info("üì¨ –û—Ç–≤–µ—Ç API: Status={} | Body={}", 
                    response.getStatusCode(), 
                    response.getBody() != null ? response.getBody().substring(0, Math.min(150, response.getBody().length())) + "..." : "null");
            
            if (response.getStatusCode().is2xxSuccessful() && 
                response.getBody() != null && 
                response.getBody().contains("\"ok\":true")) {
                
                // –ü–∞—Ä—Å–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∏–∫–µ—Ä–æ–≤
                String responseBody = response.getBody();
                int stickerCount = 0;
                if (responseBody.contains("\"stickers\":")) {
                    int stickersStart = responseBody.indexOf("\"stickers\":[");
                    if (stickersStart != -1) {
                        int stickersEnd = responseBody.indexOf("]", stickersStart);
                        if (stickersEnd != -1) {
                            String stickersSection = responseBody.substring(stickersStart, stickersEnd + 1);
                            stickerCount = (stickersSection.split("\"file_id\"").length - 1);
                        }
                    }
                }
                
                return new StickerSetInfo(stickerSetName, stickerCount, true);
            }
            
            return null;
            
        } catch (HttpClientErrorException.NotFound e) {
            LOGGER.info("üì¶ –°—Ç–∏–∫–µ—Ä–ø–∞–∫ {} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Telegram (404)", stickerSetName);
            return null;
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–µ {}: {}", stickerSetName, e.getMessage());
            return null;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç file_id —Å—Ç–∏–∫–µ—Ä–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É –∏–∑ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞
     */
    public String getStickerFileId(String stickerSetName, int stickerIndex) {
        try {
            LOGGER.info("üîç –ü–æ–ª—É—á–∞–µ–º file_id —Å—Ç–∏–∫–µ—Ä–∞ –∏–∑ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞: '{}' | –ò–Ω–¥–µ–∫—Å: {}", stickerSetName, stickerIndex);
            
            String url = apiUrl("getStickerSet") + "&name=" + stickerSetName;
            LOGGER.info("üåê –ó–∞–ø—Ä–æ—Å –∫ Telegram API: {}", url);
            
            ResponseEntity<String> response = restTemplate.getForEntity(url, String.class);
            
            LOGGER.info("üì¨ –û—Ç–≤–µ—Ç –æ—Ç Telegram API: Status={} | Body={}", 
                    response.getStatusCode(), 
                    response.getBody() != null ? response.getBody().substring(0, Math.min(200, response.getBody().length())) + "..." : "null");
            
            if (response.getStatusCode().is2xxSuccessful() && 
                response.getBody() != null && 
                response.getBody().contains("\"ok\":true")) {
                
                String responseBody = response.getBody();
                if (responseBody.contains("\"stickers\":")) {
                    int stickersStart = responseBody.indexOf("\"stickers\":[");
                    if (stickersStart != -1) {
                        int stickersEnd = responseBody.indexOf("]", stickersStart);
                        if (stickersEnd != -1) {
                            String stickersSection = responseBody.substring(stickersStart, stickersEnd + 1);
                            
                            // –ò—â–µ–º —Å—Ç–∏–∫–µ—Ä –ø–æ –∏–Ω–¥–µ–∫—Å—É - —É—á–∏—Ç—ã–≤–∞–µ–º —á—Ç–æ —É –∫–∞–∂–¥–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞ –µ—Å—Ç—å file_id –∏ thumbnail.file_id
                            String[] stickers = stickersSection.split("\\{\"width\":");
                            if (stickers.length > stickerIndex + 1) { // +1 –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø—É—Å—Ç–æ–π
                                String targetSticker = stickers[stickerIndex + 1];
                                
                                // –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π file_id —Å—Ç–∏–∫–µ—Ä–∞ (–ù–ï thumbnail.file_id)
                                // –ò—â–µ–º –ø–µ—Ä–≤—ã–π file_id, –∫–æ—Ç–æ—Ä—ã–π –ù–ï –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ thumbnail
                                int thumbnailStart = targetSticker.indexOf("\"thumbnail\":");
                                
                                int fileIdStart = targetSticker.indexOf("\"file_id\":\"");
                                
                                // –ï—Å–ª–∏ file_id –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ thumbnail –±–ª–æ–∫–∞, –∏—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π
                                while (fileIdStart != -1) {
                                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç file_id –≤–Ω—É—Ç—Ä–∏ thumbnail
                                    if (thumbnailStart == -1 || fileIdStart < thumbnailStart || 
                                        fileIdStart > targetSticker.indexOf("}", thumbnailStart)) {
                                        // –≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π file_id, –Ω–µ thumbnail
                                        int fileIdEnd = targetSticker.indexOf("\"", fileIdStart + 11);
                                        if (fileIdEnd != -1) {
                                            String fileId = targetSticker.substring(fileIdStart + 11, fileIdEnd);
                                            LOGGER.info("‚úÖ –ù–∞–π–¥–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π file_id —Å—Ç–∏–∫–µ—Ä–∞: {}", fileId);
                                            return fileId;
                                        }
                                    }
                                    // –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π file_id
                                    fileIdStart = targetSticker.indexOf("\"file_id\":\"", fileIdStart + 1);
                                }
                            }
                            
                            LOGGER.warn("‚ö†Ô∏è –°—Ç–∏–∫–µ—Ä —Å –∏–Ω–¥–µ–∫—Å–æ–º {} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ", stickerIndex);
                        }
                    }
                }
            }
            return null;
            
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ file_id —Å—Ç–∏–∫–µ—Ä–∞: {}", e.getMessage(), e);
            return null;
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
     */
    public boolean checkBotInfo() {
        try {
            String url = apiUrl("getMe");
            ResponseEntity<String> response = restTemplate.getForEntity(url, String.class);
            
            if (response.getStatusCode().is2xxSuccessful() && 
                response.getBody() != null && 
                response.getBody().contains("\"ok\":true")) {
                LOGGER.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É getMe");
                return true;
            }
            
            LOGGER.error("‚ùå –ù–µ—É—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞: Status={}, Body={}", 
                    response.getStatusCode(), response.getBody());
            return false;
            
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {}", e.getMessage());
            return false;
        }
    }
    
    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç URL –¥–ª—è API –º–µ—Ç–æ–¥–∞
     */
    private String apiUrl(String method) {
        return "https://api.telegram.org/bot" + botToken + "/" + method + "?";
    }
    
    /**
     * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–µ
     */
    public static class StickerSetInfo {
        private final String name;
        private final int stickerCount;
        private final boolean exists;
        
        public StickerSetInfo(String name, int stickerCount, boolean exists) {
            this.name = name;
            this.stickerCount = stickerCount;
            this.exists = exists;
        }
        
        public String getName() { return name; }
        public int getStickerCount() { return stickerCount; }
        public boolean exists() { return exists; }
    }
}