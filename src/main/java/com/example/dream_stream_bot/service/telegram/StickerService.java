package com.example.dream_stream_bot.service.telegram;

import com.example.dream_stream_bot.model.telegram.StickerSet;
import com.example.dream_stream_bot.service.ai.AIService;
import com.example.dream_stream_bot.service.file.FileDownloadService;
import com.example.dream_stream_bot.service.image.ImageOptimizationService;
import com.example.dream_stream_bot.service.telegram.TelegramApiService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.concurrent.CompletableFuture;

@Service
public class StickerService {
    
    private static final Logger LOGGER = LoggerFactory.getLogger(StickerService.class);
    
    private final AIService aiService;
    private final FileDownloadService fileDownloadService;
    private final ImageOptimizationService imageOptimizationService;
    private final TelegramApiService telegramApiService;
    private StickerSetService stickerSetService;
    
    @Autowired
    public StickerService(AIService aiService, FileDownloadService fileDownloadService,
                         ImageOptimizationService imageOptimizationService, TelegramApiService telegramApiService) {
        this.aiService = aiService;
        this.fileDownloadService = fileDownloadService;
        this.imageOptimizationService = imageOptimizationService;
        this.telegramApiService = telegramApiService;
    }
    
    @Autowired
    public void setStickerSetService(StickerSetService stickerSetService) {
        this.stickerSetService = stickerSetService;
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ —Å–æ–∑–¥–∞–µ—Ç —Å—Ç–∏–∫–µ—Ä
     */
    public SendMessage handleImageMessage(Message message, TelegramLongPollingBot bot, String stickerPackName) {
        LOGGER.info("üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ | –¢–∏–ø: {} | ChatId: {} | StickerPackName: {}",
                message.getMediaGroupId(), message.getChatId(), stickerPackName);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–ª—è TelegramApiService
        telegramApiService.setBotToken(bot.getBotToken());
        LOGGER.info("üîë –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–ª—è TelegramApiService");
        
        try {
            if (message.hasPhoto()) {
                return processPhoto(message, bot, stickerPackName);
            } else if (message.hasDocument()) {
                return processDocument(message, bot, stickerPackName);
            } else {
                return SendMessage.builder()
                        .chatId(message.getChatId())
                        .text("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç).")
                        .build();
            }
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ: {}", e.getMessage(), e);
            return SendMessage.builder()
                    .chatId(message.getChatId())
                    .text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    .build();
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    private SendMessage processPhoto(Message message, TelegramLongPollingBot bot, String stickerPackName) throws Exception {
        LOGGER.info("üì∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ");
        
        // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
        java.util.List<org.telegram.telegrambots.meta.api.objects.PhotoSize> photoSizes = message.getPhoto();
        org.telegram.telegrambots.meta.api.objects.PhotoSize largestPhoto = photoSizes.get(photoSizes.size() - 1);
        
        String fileId = largestPhoto.getFileId();
        LOGGER.info("üìÅ FileId —Ñ–æ—Ç–æ: {}", fileId);
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        org.telegram.telegrambots.meta.api.methods.GetFile getFile = new org.telegram.telegrambots.meta.api.methods.GetFile();
        getFile.setFileId(fileId);
        org.telegram.telegrambots.meta.api.objects.File file = bot.execute(getFile);
        
        if (file == null || file.getFilePath() == null) {
            return SendMessage.builder()
                    .chatId(message.getChatId())
                    .text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                    .build();
        }
        
        // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        Path downloadedFile = fileDownloadService.downloadTelegramFile(file, bot.getBotToken());
        if (downloadedFile == null) {
            return SendMessage.builder()
                    .chatId(message.getChatId())
                    .text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    .build();
        }
        
        return processImageFile(downloadedFile.toFile(), message.getChatId(), bot, "—Ñ–æ—Ç–æ", stickerPackName);
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    private SendMessage processDocument(Message message, TelegramLongPollingBot bot, String stickerPackName) throws Exception {
        LOGGER.info("üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ");
        
        org.telegram.telegrambots.meta.api.objects.Document document = message.getDocument();
        String mimeType = document.getMimeType();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if (mimeType == null || !mimeType.startsWith("image/")) {
            return SendMessage.builder()
                    .chatId(message.getChatId())
                    .text("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (JPG, PNG, GIF).")
                    .build();
        }
        
        String fileId = document.getFileId();
        LOGGER.info("üìÅ FileId –¥–æ–∫—É–º–µ–Ω—Ç–∞: {}", fileId);
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        org.telegram.telegrambots.meta.api.methods.GetFile getFile = new org.telegram.telegrambots.meta.api.methods.GetFile();
        getFile.setFileId(fileId);
        org.telegram.telegrambots.meta.api.objects.File file = bot.execute(getFile);
        
        if (file == null || file.getFilePath() == null) {
            return SendMessage.builder()
                    .chatId(message.getChatId())
                    .text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                    .build();
        }
        
        // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        Path downloadedFile = fileDownloadService.downloadTelegramFile(file, bot.getBotToken());
        if (downloadedFile == null) {
            return SendMessage.builder()
                    .chatId(message.getChatId())
                    .text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    .build();
        }
        
        return processImageFile(downloadedFile.toFile(), message.getChatId(), bot, "–¥–æ–∫—É–º–µ–Ω—Ç", stickerPackName);
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private SendMessage processImageFile(File file, Long chatId, TelegramLongPollingBot bot, String fileType, String stickerPackName) {
        try {
            LOGGER.info("üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª {}: {}", fileType, file.getName());
            
            // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∏–∫–µ—Ä–∞
            Path optimizedFile = imageOptimizationService.optimizeImageForSticker(file.toPath());
            LOGGER.info("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {}", optimizedFile.getFileName());
            
            // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫—É
            StickerResult result = createOrAddToStickerPack(chatId, optimizedFile, stickerPackName);
            
            if (result.isSuccess()) {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                sendOptimizedImage(chatId, bot, optimizedFile, result);
                return null; // –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            } else {
                // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                Files.deleteIfExists(optimizedFile);
                
                return SendMessage.builder()
                        .chatId(chatId)
                        .text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä: " + result.getErrorMessage())
                        .build();
            }
                    
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {}: {}", fileType, e.getMessage(), e);
            return SendMessage.builder()
                    .chatId(chatId)
                    .text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    .build();
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É
     */
    private StickerResult createOrAddToStickerPack(Long chatId, Path optimizedFile, String stickerPackName) {
        try {
            if (stickerPackName == null || stickerPackName.isEmpty()) {
                return StickerResult.failure("–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞");
            }
            
            // –ò—â–µ–º —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            StickerSet stickerSet = stickerSetService.findByName(stickerPackName);
            if (stickerSet == null) {
                return StickerResult.failure("–°—Ç–∏–∫–µ—Ä–ø–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: " + stickerPackName);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ –≤ Telegram
            TelegramApiService.StickerSetInfo telegramInfo = telegramApiService.getStickerSetInfo(stickerPackName);
            
            if (telegramInfo != null && telegramInfo.exists()) {
                // –°—Ç–∏–∫–µ—Ä–ø–∞–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∫ –Ω–µ–º—É
                LOGGER.info("‚ûï –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Å—Ç–∏–∫–µ—Ä–ø–∞–∫—É: {}", stickerPackName);
                boolean added = telegramApiService.addStickerToSet(chatId, optimizedFile.toFile(), stickerPackName, "üéØ");
                
                if (added) {
                    return StickerResult.success(stickerPackName, stickerSet.getTitle(), false, telegramInfo.getStickerCount());
                } else {
                    return StickerResult.failure("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Å—Ç–∏–∫–µ—Ä–ø–∞–∫—É");
                }
            } else {
                // –°—Ç–∏–∫–µ—Ä–ø–∞–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Telegram, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                LOGGER.info("üì¶ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ –≤ Telegram: {}", stickerPackName);
                boolean created = telegramApiService.createNewStickerSet(chatId, optimizedFile.toFile(), stickerPackName, stickerSet.getTitle(), "üéØ");
                
                if (created) {
                    return StickerResult.success(stickerPackName, stickerSet.getTitle(), true, 0);
                } else {
                    return StickerResult.failure("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ –≤ Telegram");
                }
            }
            
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–∞: {}", e.getMessage(), e);
            return StickerResult.failure("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–∞: " + e.getMessage());
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∏–∫–µ—Ä–µ
     */
    private void sendOptimizedImage(Long chatId, TelegramLongPollingBot bot, Path optimizedFile, StickerResult result) {
        try {
            String caption = result != null && result.isSuccess() ?
                "üéâ –°—Ç–∏–∫–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!\n\n" +
                "üì¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–µ:\n" +
                "‚Ä¢ –°—Å—ã–ª–∫–∞: https://t.me/addstickers/" + result.getStickerSetName() + "\n" +
                "‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–æ–∫: " + result.getStickerSetTitle() + "\n" +
                "‚Ä¢ –¢–∏–ø: " + (result.isNewSet() ? "–ù–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫" : "–î–æ–±–∞–≤–ª–µ–Ω –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É") :
                "üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Å—Ç–∏–∫–µ—Ä–∞";

            SendPhoto sendPhoto = SendPhoto.builder()
                    .chatId(chatId)
                    .photo(new InputFile(optimizedFile.toFile()))
                    .caption(caption)
                    .build();

            LOGGER.info("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —á–∞—Ç: {}", chatId);
            bot.execute(sendPhoto);
            
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {}", e.getMessage());
        }
    }

    /**
     * –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ —Å—Ç–∏–∫–µ—Ä–æ–º
     */
    public static class StickerResult {
        private final boolean success;
        private final String stickerSetName;
        private final String stickerSetTitle;
        private final boolean isNewSet;
        private final int stickerCount;
        private final String errorMessage;
        
        private StickerResult(boolean success, String stickerSetName, String stickerSetTitle, 
                            boolean isNewSet, int stickerCount, String errorMessage) {
            this.success = success;
            this.stickerSetName = stickerSetName;
            this.stickerSetTitle = stickerSetTitle;
            this.isNewSet = isNewSet;
            this.stickerCount = stickerCount;
            this.errorMessage = errorMessage;
        }
        
        public static StickerResult success(String stickerSetName, String stickerSetTitle, boolean isNewSet, int stickerCount) {
            return new StickerResult(true, stickerSetName, stickerSetTitle, isNewSet, stickerCount, null);
        }
        
        public static StickerResult failure(String errorMessage) {
            return new StickerResult(false, null, null, false, 0, errorMessage);
        }
        
        // Getters
        public boolean isSuccess() { return success; }
        public String getStickerSetName() { return stickerSetName; }
        public String getStickerSetTitle() { return stickerSetTitle; }
        public boolean isNewSet() { return isNewSet; }
        public int getStickerCount() { return stickerCount; }
        public String getErrorMessage() { return errorMessage; }
    }
} 