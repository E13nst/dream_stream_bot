package com.example.dream_stream_bot.service.telegram;

import com.example.dream_stream_bot.model.telegram.StickerPack;
import com.example.dream_stream_bot.service.file.FileDownloadService;
import com.example.dream_stream_bot.service.image.ImageOptimizationService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.GetFile;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.methods.send.SendSticker;
import org.telegram.telegrambots.meta.api.objects.Document;
import org.telegram.telegrambots.meta.api.objects.File;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.PhotoSize;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;

import java.nio.file.Path;
import java.util.Comparator;
import java.util.List;

/**
 * –û—Ç—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω—ã–π StickerService - —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏ –º–æ–¥—É–ª—å–Ω—ã–π
 */
@Service
public class StickerService {
    
    private static final Logger LOGGER = LoggerFactory.getLogger(StickerService.class);
    
    @Autowired
    private ImageOptimizationService imageOptimizationService;
    
    @Autowired
    private TelegramApiService telegramApiService;
    
    @Autowired
    private FileDownloadService fileDownloadService;
    
    @Autowired
    private StickerPackService stickerPackService;
    
    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public SendMessage handleImageMessage(Message message, TelegramLongPollingBot bot, String stickerPackName) {
        try {
            LOGGER.info("üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ | –¢–∏–ø: {} | ChatId: {} | StickerPackName: {}", 
                    message.hasPhoto() ? "PHOTO" : message.hasDocument() ? "DOCUMENT" : "OTHER", 
                    message.getChatId(), stickerPackName);
            
            if (message.hasPhoto()) {
                return processPhoto(message, bot, stickerPackName);
            } else if (message.hasDocument()) {
                return processDocument(message, bot, stickerPackName);
            } else {
                return SendMessage.builder()
                        .chatId(message.getChatId())
                        .text("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç) –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞.")
                        .build();
            }
            
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {}", e.getMessage(), e);
            return SendMessage.builder()
                    .chatId(message.getChatId())
                    .text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    .build();
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
     */
    private SendMessage processPhoto(Message message, TelegramLongPollingBot bot, String stickerPackName) throws Exception {
        List<PhotoSize> photos = message.getPhoto();
        // –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        PhotoSize photo = photos.stream()
                .max(Comparator.comparing(PhotoSize::getFileSize))
                .orElse(photos.get(photos.size() - 1));
        
        LOGGER.info("üì∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ | FileId: {} | Size: {} bytes", 
                photo.getFileId(), photo.getFileSize());
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        GetFile getFile = new GetFile();
        getFile.setFileId(photo.getFileId());
        File file = bot.execute(getFile);
        
        if (file == null || file.getFilePath() == null) {
            return SendMessage.builder()
                    .chatId(message.getChatId())
                    .text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                    .build();
        }
        
        return processImageFile(file, message.getChatId(), bot, "—Ñ–æ—Ç–æ", stickerPackName);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
     */
    private SendMessage processDocument(Message message, TelegramLongPollingBot bot, String stickerPackName) throws Exception {
        Document document = message.getDocument();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        String mimeType = document.getMimeType();
        if (mimeType == null || !mimeType.startsWith("image/")) {
            return SendMessage.builder()
                    .chatId(message.getChatId())
                    .text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPG, PNG, GIF).")
                    .build();
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        GetFile getFile = new GetFile();
        getFile.setFileId(document.getFileId());
        File file = bot.execute(getFile);
        
        if (file == null || file.getFilePath() == null) {
            return SendMessage.builder()
                    .chatId(message.getChatId())
                    .text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                    .build();
        }
        
        return processImageFile(file, message.getChatId(), bot, "–¥–æ–∫—É–º–µ–Ω—Ç", stickerPackName);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private SendMessage processImageFile(File file, Long chatId, TelegramLongPollingBot bot, String fileType, String stickerPackName) {
        Path downloadedFile = null;
        Path optimizedFile = null;
        
        try {
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º API —Å–µ—Ä–≤–∏—Å
            telegramApiService.setBotToken(bot.getBotToken());
            
            // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            downloadedFile = fileDownloadService.downloadTelegramFile(file, bot.getBotToken());
            
            // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            optimizedFile = imageOptimizationService.optimizeImageForSticker(downloadedFile);
            
            // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫—É
            StickerResult result = createOrAddToStickerPack(chatId, optimizedFile, stickerPackName);
            
            if (result.isSuccess()) {
                LOGGER.info("‚úÖ –°—Ç–∏–∫–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!");
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                sendOptimizedImage(chatId, bot, optimizedFile, result);
                
                // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä
                tryToSendCreatedSticker(chatId, bot, result);
                
                return null; // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                
            } else {
                LOGGER.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ");
                sendOptimizedImage(chatId, bot, optimizedFile, null);
                return null;
            }
            
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {}: {}", fileType, e.getMessage(), e);
            return SendMessage.builder()
                    .chatId(chatId)
                    .text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    .build();
        } finally {
            // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            fileDownloadService.cleanupTempFile(downloadedFile);
            fileDownloadService.cleanupTempFile(optimizedFile);
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É
     */
    private StickerResult createOrAddToStickerPack(Long chatId, Path optimizedFile, String stickerPackName) {
        try {
            if (stickerPackName == null || stickerPackName.isEmpty()) {
                return StickerResult.failure("–ò–º—è —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ");
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ –≤ –ë–î
            StickerPack stickerPack = stickerPackService.findByName(stickerPackName);
            if (stickerPack == null) {
                return StickerResult.failure("–°—Ç–∏–∫–µ—Ä–ø–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: " + stickerPackName);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ –≤ Telegram
            TelegramApiService.StickerSetInfo telegramInfo = telegramApiService.getStickerSetInfo(stickerPackName);
            
            if (telegramInfo != null && telegramInfo.exists()) {
                // –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Å—Ç–∏–∫–µ—Ä–ø–∞–∫—É
                LOGGER.info("‚ûï –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Å—Ç–∏–∫–µ—Ä–ø–∞–∫—É: {}", stickerPackName);
                boolean added = telegramApiService.addStickerToSet(chatId, optimizedFile.toFile(), stickerPackName, "üéØ");
                if (added) {
                    return StickerResult.success(stickerPackName, stickerPack.getTitle(), false, telegramInfo.getStickerCount());
                } else {
                    return StickerResult.failure("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Å—Ç–∏–∫–µ—Ä–ø–∞–∫—É");
                }
            } else {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ –≤ Telegram
                LOGGER.info("üì¶ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ –≤ Telegram: {}", stickerPackName);
                boolean created = telegramApiService.createNewStickerSet(chatId, optimizedFile.toFile(), stickerPackName, stickerPack.getTitle(), "üéØ");
                if (created) {
                    return StickerResult.success(stickerPackName, stickerPack.getTitle(), true, 0);
                } else {
                    return StickerResult.failure("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ –≤ Telegram");
                }
            }
            
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–∞: {}", e.getMessage(), e);
            return StickerResult.failure("–û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     */
    private void sendOptimizedImage(Long chatId, TelegramLongPollingBot bot, Path optimizedFile, StickerResult result) {
        try {
            String caption = result != null && result.isSuccess() ? 
                "üéâ **–°—Ç–∏–∫–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!**\n\n" +
                "üì¶ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–µ:**\n" +
                "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: " + result.getStickerSetName() + "\n" +
                "‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–æ–∫: " + result.getStickerSetTitle() + "\n" +
                "‚Ä¢ –¢–∏–ø: " + (result.isNewSet() ? "–ù–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫" : "–î–æ–±–∞–≤–ª–µ–Ω –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É") :
                "üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Å—Ç–∏–∫–µ—Ä–∞";
            
            SendPhoto sendPhoto = SendPhoto.builder()
                    .chatId(chatId)
                    .photo(new InputFile(optimizedFile.toFile()))
                    .caption(caption)
                    .parseMode("Markdown")
                    .build();
            
            LOGGER.info("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —á–∞—Ç: {}", chatId);
            bot.execute(sendPhoto);
            
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {}", e.getMessage());
        }
    }
    
    /**
     * –ü—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     */
    private void tryToSendCreatedSticker(Long chatId, TelegramLongPollingBot bot, StickerResult result) {
        try {
            if (!result.isSuccess()) return;
            
            String stickerSetName = result.getStickerSetName();
            int stickerIndex = result.getStickerIndex();
            
            LOGGER.info("üéØ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞: {} | –ò–Ω–¥–µ–∫—Å: {}", 
                    stickerSetName, stickerIndex);
            
            // –ü–æ–ª—É—á–∞–µ–º file_id —Å—Ç–∏–∫–µ—Ä–∞
            String stickerFileId = telegramApiService.getStickerFileId(stickerSetName, stickerIndex);
            
            if (stickerFileId != null) {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä
                SendSticker sendSticker = SendSticker.builder()
                        .chatId(chatId)
                        .sticker(new InputFile(stickerFileId))
                        .build();
                
                bot.execute(sendSticker);
                LOGGER.info("‚úÖ –°—Ç–∏–∫–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é");
                
            } else {
                LOGGER.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å file_id —Å—Ç–∏–∫–µ—Ä–∞ –∏–∑ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞: {}", stickerSetName);
            }
            
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∏–∫–µ—Ä–∞: {}", e.getMessage());
        }
    }
    
    /**
     * –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞
     */
    private static class StickerResult {
        private final boolean success;
        private final String stickerSetName;
        private final String stickerSetTitle;
        private final boolean isNewSet;
        private final int stickerIndex;
        private final String errorMessage;
        
        private StickerResult(boolean success, String stickerSetName, String stickerSetTitle, 
                             boolean isNewSet, int stickerIndex, String errorMessage) {
            this.success = success;
            this.stickerSetName = stickerSetName;
            this.stickerSetTitle = stickerSetTitle;
            this.isNewSet = isNewSet;
            this.stickerIndex = stickerIndex;
            this.errorMessage = errorMessage;
        }
        
        public static StickerResult success(String name, String title, boolean isNew, int index) {
            return new StickerResult(true, name, title, isNew, index, null);
        }
        
        public static StickerResult failure(String error) {
            return new StickerResult(false, null, null, false, 0, error);
        }
        
        public boolean isSuccess() { return success; }
        public String getStickerSetName() { return stickerSetName; }
        public String getStickerSetTitle() { return stickerSetTitle; }
        public boolean isNewSet() { return isNewSet; }
        public int getStickerIndex() { return stickerIndex; }
        public String getErrorMessage() { return errorMessage; }
    }
}