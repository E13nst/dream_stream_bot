package com.example.dream_stream_bot.service.telegram;

import com.example.dream_stream_bot.dto.PageRequest;
import com.example.dream_stream_bot.dto.PageResponse;
import com.example.dream_stream_bot.dto.StickerSetDto;
import com.example.dream_stream_bot.model.telegram.StickerSet;
import com.example.dream_stream_bot.model.telegram.StickerSetRepository;
import com.example.dream_stream_bot.service.user.UserService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.stream.Collectors;

@Service
public class StickerSetService {
    
    private static final Logger LOGGER = LoggerFactory.getLogger(StickerSetService.class);
    private final StickerSetRepository stickerSetRepository;
    private final UserService userService;
    private final TelegramBotApiService telegramBotApiService;
    
    @Autowired
    public StickerSetService(StickerSetRepository stickerSetRepository, UserService userService, TelegramBotApiService telegramBotApiService) {
        this.stickerSetRepository = stickerSetRepository;
        this.userService = userService;
        this.telegramBotApiService = telegramBotApiService;
    }
    
    public StickerSet createStickerSet(Long userId, String title, String name) {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        try {
            userService.findOrCreateByTelegramId(userId, null, null, null, null);
            LOGGER.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω/–Ω–∞–π–¥–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞", userId);
        } catch (Exception e) {
            LOGGER.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/–Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, e.getMessage());
        }
        
        StickerSet stickerSet = new StickerSet();
        stickerSet.setUserId(userId);
        stickerSet.setTitle(title);
        stickerSet.setName(name);

        StickerSet savedSet = stickerSetRepository.save(stickerSet);
        LOGGER.info("üì¶ –°–æ–∑–¥–∞–Ω —Å—Ç–∏–∫–µ—Ä–ø–∞–∫: ID={}, Title='{}', Name='{}', UserId={}", 
                savedSet.getId(), title, name, userId);

        return savedSet;
    }

    public StickerSet findByName(String name) {
        return stickerSetRepository.findByName(name).orElse(null);
    }

    public StickerSet findByTitle(String title) {
        return stickerSetRepository.findByTitle(title);
    }

    public List<StickerSet> findByUserId(Long userId) {
        return stickerSetRepository.findByUserId(userId);
    }

    public StickerSet findById(Long id) {
        return stickerSetRepository.findById(id).orElse(null);
    }
    
    public List<StickerSet> findAll() {
        return stickerSetRepository.findAll();
    }
    
    public StickerSet save(StickerSet stickerSet) {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        try {
            userService.findOrCreateByTelegramId(stickerSet.getUserId(), null, null, null, null);
            LOGGER.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω/–Ω–∞–π–¥–µ–Ω –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞", stickerSet.getUserId());
        } catch (Exception e) {
            LOGGER.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/–Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", stickerSet.getUserId(), e.getMessage());
        }
        
        return stickerSetRepository.save(stickerSet);
    }
    
    public void deleteById(Long id) {
        stickerSetRepository.deleteById(id);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö Bot API
     */
    public PageResponse<StickerSetDto> findAllWithPagination(PageRequest pageRequest) {
        LOGGER.debug("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π: page={}, size={}", 
                pageRequest.getPage(), pageRequest.getSize());
        
        Page<StickerSet> stickerSetsPage = stickerSetRepository.findAll(pageRequest.toPageable());
        List<StickerSetDto> enrichedDtos = enrichWithBotApiData(stickerSetsPage.getContent());
        
        return PageResponse.of(stickerSetsPage, enrichedDtos);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö Bot API
     */
    public PageResponse<StickerSetDto> findByUserIdWithPagination(Long userId, PageRequest pageRequest) {
        LOGGER.debug("üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π: page={}, size={}", 
                userId, pageRequest.getPage(), pageRequest.getSize());
        
        Page<StickerSet> stickerSetsPage = stickerSetRepository.findByUserId(userId, pageRequest.toPageable());
        List<StickerSetDto> enrichedDtos = enrichWithBotApiData(stickerSetsPage.getContent());
        
        return PageResponse.of(stickerSetsPage, enrichedDtos);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç –ø–æ ID —Å –æ–±–æ–≥–∞—â–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö Bot API
     */
    public StickerSetDto findByIdWithBotApiData(Long id) {
        LOGGER.debug("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ –ø–æ ID {} —Å –¥–∞–Ω–Ω—ã–º–∏ Bot API", id);
        
        StickerSet stickerSet = stickerSetRepository.findById(id).orElse(null);
        if (stickerSet == null) {
            return null;
        }
        
        return enrichSingleStickerSet(stickerSet);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç –ø–æ –∏–º–µ–Ω–∏ —Å –æ–±–æ–≥–∞—â–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö Bot API
     */
    public StickerSetDto findByNameWithBotApiData(String name) {
        LOGGER.debug("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ '{}' —Å –¥–∞–Ω–Ω—ã–º–∏ Bot API", name);
        
        StickerSet stickerSet = stickerSetRepository.findByName(name).orElse(null);
        if (stickerSet == null) {
            return null;
        }
        
        return enrichSingleStickerSet(stickerSet);
    }
    
    /**
     * –û–±–æ–≥–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Bot API (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)
     */
    private List<StickerSetDto> enrichWithBotApiData(List<StickerSet> stickerSets) {
        if (stickerSets.isEmpty()) {
            return List.of();
        }
        
        LOGGER.debug("üöÄ –û–±–æ–≥–∞—â–µ–Ω–∏–µ {} —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –¥–∞–Ω–Ω—ã–º–∏ Bot API (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)", stickerSets.size());
        
        // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ CompletableFuture –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        List<CompletableFuture<StickerSetDto>> futures = stickerSets.stream()
                .map(stickerSet -> CompletableFuture.supplyAsync(() -> enrichSingleStickerSet(stickerSet)))
                .collect(Collectors.toList());
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        List<StickerSetDto> result = futures.stream()
                .map(CompletableFuture::join)
                .collect(Collectors.toList());
        
        LOGGER.debug("‚úÖ –û–±–æ–≥–∞—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è {} —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤", result.size());
        return result;
    }
    
    /**
     * –û–±–æ–≥–∞—â–∞–µ—Ç –æ–¥–∏–Ω —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Bot API
     */
    private StickerSetDto enrichSingleStickerSet(StickerSet stickerSet) {
        StickerSetDto dto = StickerSetDto.fromEntity(stickerSet);
        
        try {
            String botApiData = telegramBotApiService.getStickerSetInfo(stickerSet.getName());
            dto.setTelegramStickerSetInfo(botApiData);
            LOGGER.debug("‚úÖ –°—Ç–∏–∫–µ—Ä—Å–µ—Ç '{}' –æ–±–æ–≥–∞—â–µ–Ω –¥–∞–Ω–Ω—ã–º–∏ Bot API", stickerSet.getName());
        } catch (Exception e) {
            LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö Bot API –¥–ª—è —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ '{}': {}", 
                    stickerSet.getName(), e.getMessage());
            // –ï—Å–ª–∏ Bot API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Telegram Bot API –¥–ª—è —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞: " + stickerSet.getName(), e);
        }
        
        return dto;
    }
} 