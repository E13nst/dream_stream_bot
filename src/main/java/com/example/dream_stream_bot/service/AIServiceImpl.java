package com.example.dream_stream_bot.service;

import com.example.dream_stream_bot.model.Dream;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.ai.chat.client.ChatClient;
import org.springframework.ai.chat.memory.ChatMemory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Arrays;
import java.util.List;

import static org.springframework.ai.chat.client.advisor.AbstractChatMemoryAdvisor.CHAT_MEMORY_CONVERSATION_ID_KEY;
import static org.springframework.ai.chat.client.advisor.AbstractChatMemoryAdvisor.CHAT_MEMORY_RETRIEVE_SIZE_KEY;

@Service
public class AIServiceImpl implements AIService {

    private static final Logger logger = LoggerFactory.getLogger(AIServiceImpl.class);

    private static final String ELEMENTS_PROMPT = """
            –í—ã–±–µ—Ä–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–Ω–æ–≤–∏–¥–µ–Ω–∏—è –≤—Å–µ –Ω–µ–æ–¥—É—à–µ–≤–ª–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–∑—ã, –ø—Ä–µ–¥–º–µ—Ç—ã, —Å–∏–º–≤–æ–ª—ã –∏ —Å–∏—Ç—É–∞—Ü–∏–∏ –≤–º–µ—Å—Ç–µ —Å –∏—Ö —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏, 
            –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç—Ç–æ–≥–æ —Å–Ω–æ–≤–∏–¥–µ–Ω–∏—è –ø–æ –Æ–Ω–≥—É. –°–ø–∏—Å–æ–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –ª–∏—Ü. –ù–µ –¥–∞–≤–∞–π —Å–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–π, 
            —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –≤–∏–¥–µ JSON array.
            
//            , –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å 
//            —ç—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ —Ç–∞–∫–æ–º—É –æ–±—Ä–∞–∑—Ü—É:\s
//            ["–∫—Ä–∞—Å–Ω—ã–π —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å", "—á–∏—Å—Ç–∞—è —Ö–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞"]
            –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
            """;

    private static final String ACTORS_PROMPT = """
            –í—ã–±–µ—Ä–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–Ω–æ–≤–∏–¥–µ–Ω–∏—è –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –ª–∏—Ü –≤–º–µ—Å—Ç–µ —Å –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏.
            –°–ø–∏—Å–æ–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å –º–µ–Ω—è —Å–∞–º–æ–≥–æ. –ù–µ –¥–∞–≤–∞–π —Å–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–π.
            –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON array, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —ç—Ç–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π,
            –Ω–∞–ø—Ä–∏–º–µ—Ä: ["–∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞", "–º–æ–ª—á–∞–ª–∏–≤—ã–π –Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü"]
            –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
            """;

    private static final String INTERPRET_PROMPT = """
            –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–π –º–æ–µ —Å–Ω–æ–≤–∏–¥–µ–Ω–∏–µ –ø–æ –Æ–Ω–≥—É, —É—á–∏—Ç—ã–≤–∞—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–∞–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ –æ–±—ä–µ–∫—Ç–æ–≤ –º–µ–∂–¥—É —Å–æ–±–æ–π.
            –û–ø–µ—Ä–∞—è—Å—å –Ω–∞ –º–æ–∏ –ª–∏—á–Ω—ã–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ c –∫–ª—é—á–µ–≤—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –≤ —ç—Ç–æ–º —Å–Ω–æ–≤–∏–¥–µ–Ω–∏–∏:
            %s
            –ü—Ä–æ–≤–µ–¥–∏ –∞—Ä—Ö–∏—Ç–∏–ø–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —ç—Ç–æ–≥–æ —Å–Ω–æ–≤–∏–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å —Å–æ–±–æ–π –∞—Ä—Ö–µ—Ç–∏–ø—ã,
            —Ç–∞–∫–∏–µ –∫–∞–∫ –¢–µ–Ω—å, –ê–Ω–∏–º–∞/–ê–Ω–∏–º—É—Å, –ü–µ—Ä—Å–æ–Ω–∞ –∏ –¥—Ä—É–≥–∏–µ, —É—á–∏—Ç—ã–≤–∞—è –¥–∏–Ω–∞–º–∏–∫—É —Å–Ω–æ–≤–∏–¥–µ–Ω–∏—è.
            –£—á–∏—Ç—ã–≤–∞–π, –∫–∞–∫—É—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –º–æ—é —á–µ—Ä—Ç—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –∫–∞–∫–æ–π –∫–æ–º–ø–ª–µ–∫—Å –æ–Ω –æ—Ç—Ä–∞–∂–∞–µ—Ç:
            %s
            –¢–∞–∫ –∂–µ, –≥–¥–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–∞–∫–∞—è –∂–µ –¥–∏–Ω–∞–º–∏–∫–∞ —Å —á–µ–º —ç—Ç–æ –∞—Å—Å–æ—Ü–∏–∏—Ä—É–µ—Ç—Å—è:
            %s
            –ß—Ç–æ —ç—Ç–∞ —á–µ—Ä—Ç–∞ –º–æ–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏ –æ–∑–Ω–∞—á–∞–µ—Ç –¥–ª—è –º–µ–Ω—è:
            %s
            –°–Ω–æ–≤–∏–¥–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
            "%s"
            """;

    private final ChatClient chatClient;
    private final ChatMemory chatMemory;

    @Autowired
    public AIServiceImpl(ChatClient chatClient, ChatMemory chatMemory) {
        this.chatClient = chatClient;
        this.chatMemory = chatMemory;
    }

    @Override
    public String completion(long chatId, String message, String userName) {
        logger.info("ü§ñ AI Request | Chat: {} | User: {} | Message: '{}'", 
            chatId, userName, truncateText(message, 100));

        String response = chatClient.prompt()
                .advisors(a -> a
                        .param(CHAT_MEMORY_CONVERSATION_ID_KEY, chatId)
                        .param(CHAT_MEMORY_RETRIEVE_SIZE_KEY, 100))
                .user(String.format("User %s says:\n%s", userName, message))
                .call()
                .content();

        logger.info("ü§ñ AI Response | Chat: {} | User: {} | Length: {} chars", 
            chatId, userName, response.length());
        logger.debug("ü§ñ AI Response content | Chat: {} | User: {} | Text: '{}'", 
            chatId, userName, truncateText(response, 200));

        return response;
    }

    @Override
    public String completion(long chatId, String message) {
        logger.info("ü§ñ AI Request | Chat: {} | Message: '{}'", 
            chatId, truncateText(message, 100));

        String response = chatClient.prompt()
                .advisors(a -> a
                        .param(CHAT_MEMORY_CONVERSATION_ID_KEY, chatId)
                        .param(CHAT_MEMORY_RETRIEVE_SIZE_KEY, 100))
                    .user(message)
                    .call()
                    .content();

        logger.info("ü§ñ AI Response | Chat: {} | Length: {} chars", 
            chatId, response.length());
        logger.debug("ü§ñ AI Response content | Chat: {} | Text: '{}'", 
            chatId, truncateText(response, 200));

        return response;
    }

    @Override
    public String findElements(long chatId, String text) {
        logger.info("üîç Extracting elements | Chat: {} | Text length: {}", chatId, text.length());
        String query = String.format("%s %s", ELEMENTS_PROMPT, text);
        return completion(chatId, query);
    }

    @Override
    public String findActors(long chatId, String text) {
        logger.info("üë• Extracting actors | Chat: {} | Text length: {}", chatId, text.length());
        String query = String.format("%s %s", ACTORS_PROMPT, text);
        return completion(chatId, query);
    }

    @Override
    public List<String> extractAndSplitItems(long chatId, String text, String userName, String prompt) {
        logger.info("üìã Extracting items | Chat: {} | User: {} | Text length: {}", 
            chatId, userName, text.length());
        String query = String.format("%s %s", prompt, text);
        List<String> items = splitItems(completion(chatId, query, userName));
        logger.info("üìã Extracted {} items | Chat: {} | User: {}", items.size(), chatId, userName);
        return items;
    }

    @Override
    public List<String> extractElements(long chatId, String text, String userName) {
        return extractAndSplitItems(chatId, text, userName, ELEMENTS_PROMPT);
    }

    @Override
    public List<String> extractActors(long chatId, String text, String userName) {
        return extractAndSplitItems(chatId, text, userName, ACTORS_PROMPT);
    }

    @Override
    public String interpretDream(long chatId, String userName, Dream dream) {
        logger.info("üåô Dream interpretation | Chat: {} | User: {} | Dream length: {}", 
            chatId, userName, dream.getHistory().length());

        String text = String.format(INTERPRET_PROMPT,
                dream.associationsCollectForResult(),
                dream.personsCollectForResult(),
                dream.contextCollectForResult(),
                dream.senseCollectForResult(),
                dream.getHistory()
        );

        return completion(chatId, text, userName);
    }

    @Override
    public String interpretDream(long chatId, Dream dream) {
        logger.info("üåô Dream interpretation | Chat: {} | Dream length: {}", 
            chatId, dream.getHistory().length());

        String text = String.format(INTERPRET_PROMPT,
                dream.associationsCollectForResult(),
                dream.personsCollectForResult(),
                dream.contextCollectForResult(),
                dream.senseCollectForResult(),
                dream.getHistory()
        );

        return completion(chatId, text);
    }

    //TODO –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏
    static List<String> splitItems(String rawText) {
        int startIndex = rawText.indexOf('[') + 1;
        int endIndex = rawText.lastIndexOf(']');

        if (startIndex > 0 && endIndex > startIndex) {
            String extracted = rawText.substring(startIndex, endIndex);
            List<String> list = Arrays.asList(extracted.split(","));
            list = list.stream().map(e -> e.replace("\"", "")).map(String::trim).toList();
            logger.debug("‚úÖ Successfully parsed {} items from JSON", list.size());
            return list;
        } else {
            logger.error("‚ùå Failed to parse JSON array from text: '{}'", truncateText(rawText, 100));
            return List.of();
        }
    }

    private static String truncateText(String text, int maxLength) {
        if (text == null) return "null";
        return text.length() <= maxLength ? text : text.substring(0, maxLength) + "...";
    }
}
