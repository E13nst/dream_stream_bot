package com.example.dream_stream_bot.service.image;

import com.pngencoder.PngEncoder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å—Ç–∏–∫–µ—Ä–æ–≤ Telegram
 */
@Service
public class ImageOptimizationService {
    
    private static final Logger LOGGER = LoggerFactory.getLogger(ImageOptimizationService.class);
    
    private static final int TARGET_SIZE = 512;
    private static final int MAX_FILE_SIZE = 512 * 1024; // 512KB
    private static final String OUTPUT_FORMAT = "png"; // –°—Ç–∞–±–∏–ª—å–Ω–æ–µ PNG —Ä–µ—à–µ–Ω–∏–µ
    

    
    /**
     * –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å—Ç–∏–∫–µ—Ä–∞
     * @param imagePath –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
     * @return –ü—É—Ç—å –∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
     */
    public Path optimizeImageForSticker(Path imagePath) throws IOException {
        LOGGER.info("üîß –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {}", imagePath.getFileName());
        
        // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        BufferedImage originalImage = ImageIO.read(imagePath.toFile());
        if (originalImage == null) {
            throw new IOException("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: " + imagePath);
        }

        // 2. –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        int originalWidth = originalImage.getWidth();
        int originalHeight = originalImage.getHeight();
        LOGGER.info("üìè –ò—Å—Ö–æ–¥–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã: {}x{}", originalWidth, originalHeight);

        // 3. –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, —á—Ç–æ–±—ã –Ω–∞–∏–±–æ–ª—å—à–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –±—ã–ª–∞ 512px
        double scaleFactor = Math.min((double) TARGET_SIZE / originalWidth, (double) TARGET_SIZE / originalHeight);
        int newWidth = (int) Math.round(originalWidth * scaleFactor);
        int newHeight = (int) Math.round(originalHeight * scaleFactor);
        
        LOGGER.info("üîÑ –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–æ: {}x{} (scale factor: {:.3f})", newWidth, newHeight, scaleFactor);
        
        Image scaledImg = originalImage.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);
        BufferedImage resized = new BufferedImage(newWidth, newHeight, BufferedImage.TYPE_INT_ARGB);
        Graphics2D gResized = resized.createGraphics();
        gResized.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        gResized.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        gResized.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        gResized.drawImage(scaledImg, 0, 0, null);
        gResized.dispose();

        // 4. –°–æ–∑–¥–∞—ë–º –∫–≤–∞–¥—Ä–∞—Ç 512√ó512 —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ñ–æ–Ω–æ–º –∏ –ø–æ–º–µ—â–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É
        BufferedImage square = new BufferedImage(512, 512, BufferedImage.TYPE_INT_ARGB);
        Graphics2D gSquare = square.createGraphics();
        gSquare.setComposite(AlphaComposite.Clear);
        gSquare.fillRect(0, 0, 512, 512);
        gSquare.setComposite(AlphaComposite.SrcOver);
        int x = (512 - newWidth) / 2;
        int y = (512 - newHeight) / 2;
        gSquare.drawImage(resized, x, y, null);
        gSquare.dispose();

        // 5. –°–∂–∏–º–∞–µ–º PNG —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
        byte[] optimizedImageData = encodePNGWithMaxCompression(square);
        
        LOGGER.info("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {} bytes | —Ñ–æ—Ä–º–∞—Ç: PNG", optimizedImageData.length);
        
        Path outputPath = Files.createTempFile("sticker_optimized_", ".png");
        Files.write(outputPath, optimizedImageData);

        return outputPath;
    }

    /**
     * –ö–æ–¥–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ PNG —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Å–∂–∞—Ç–∏–µ–º –∏—Å–ø–æ–ª—å–∑—É—è PngEncoder
     */
    private byte[] encodePNGWithMaxCompression(BufferedImage image) throws IOException {
        // –ü—Ä–æ–±—É–µ–º —Å–∞–º–æ–µ –±—ã—Å—Ç—Ä–æ–µ —Å–∂–∞—Ç–∏–µ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
        byte[] bestCompression = encodeWithPngEncoder(image, 9, true, true);
        if (bestCompression.length <= MAX_FILE_SIZE) {
            LOGGER.info("‚úÖ PngEncoder –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ: {} bytes", bestCompression.length);
            return bestCompression;
        }

        // –ï—Å–ª–∏ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è, –ø—Ä–æ–±—É–µ–º –±–µ–∑ predictor encoding
        LOGGER.warn("‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ –¥–∞–ª–æ {} bytes, —É–±–∏—Ä–∞–µ–º predictor encoding", bestCompression.length);
        byte[] withoutPredictor = encodeWithPngEncoder(image, 9, false, true);
        if (withoutPredictor.length <= MAX_FILE_SIZE) {
            LOGGER.info("‚úÖ PngEncoder –±–µ–∑ predictor: {} bytes", withoutPredictor.length);
            return withoutPredictor;
        }

        // –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –≤–µ–ª–∏–∫–æ, –ø—Ä–æ–±—É–µ–º —Å–Ω–∏–∑–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–∂–∞—Ç–∏—è
        LOGGER.warn("‚ö†Ô∏è –ë–µ–∑ predictor {} bytes, —Å–Ω–∏–∂–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–∂–∞—Ç–∏—è", withoutPredictor.length);
        byte[] lowerCompression = encodeWithPngEncoder(image, 6, false, true);
        if (lowerCompression.length <= MAX_FILE_SIZE) {
            LOGGER.info("‚úÖ PngEncoder —É—Ä–æ–≤–µ–Ω—å 6: {} bytes", lowerCompression.length);
            return lowerCompression;
        }

        // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - —É–±–∏—Ä–∞–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ
        LOGGER.warn("‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å 6 –¥–∞–ª {} bytes, –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ", lowerCompression.length);
        byte[] minimal = encodeWithPngEncoder(image, 1, false, false);
        
        if (minimal.length > MAX_FILE_SIZE) {
            LOGGER.error("‚ùå –î–∞–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç: {} bytes", minimal.length);
            throw new IOException("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ " + MAX_FILE_SIZE + " bytes");
        }

        LOGGER.info("‚úÖ PngEncoder –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ: {} bytes", minimal.length);
        return minimal;
    }

    /**
     * –ö–æ–¥–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é PngEncoder —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
     */
    private byte[] encodeWithPngEncoder(BufferedImage image, int compressionLevel, 
                                       boolean withPredictor, boolean tryIndexed) throws IOException {
        return new PngEncoder()
                .withBufferedImage(image)
                .withCompressionLevel(compressionLevel)
                .withPredictorEncoding(withPredictor)
                .withTryIndexedEncoding(tryIndexed)
                .toBytes();
    }
}