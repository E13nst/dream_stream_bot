package com.example.dream_stream_bot.test;

import com.example.dream_stream_bot.model.telegram.BotEntity;
import com.example.dream_stream_bot.service.telegram.BotService;
import com.example.dream_stream_bot.util.TelegramInitDataValidator;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.server.LocalServerPort;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.TestPropertySource;

import java.time.Instant;
import java.util.TreeMap;
import java.util.stream.Collectors;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.nio.charset.StandardCharsets;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import static org.junit.jupiter.api.Assertions.*;

/**
 * –ê–≤—Ç–æ—Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram initData
 */
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@ActiveProfiles("test")
@TestPropertySource(properties = {
    "spring.jpa.hibernate.ddl-auto=create-drop",
    "spring.datasource.url=jdbc:h2:mem:testdb",
    "spring.datasource.driver-class-name=org.h2.Driver"
})
public class TelegramAuthenticationIntegrationTest {

    @LocalServerPort
    private int port;

    @Autowired
    private BotService botService;

    @Autowired
    private TelegramInitDataValidator validator;

    private static final String TEST_BOT_NAME = "StickerGallery";
    private static final Long TEST_USER_ID = 141614461L;
    private static final String TEST_USER_FIRST_NAME = "Andrey";
    private static final String TEST_USER_LAST_NAME = "Mitroshin";
    private static final String TEST_USER_USERNAME = "E13nst";
    private static final String TEST_USER_LANGUAGE_CODE = "ru";

    @BeforeEach
    void setUp() {
        RestAssured.port = port;
        RestAssured.baseURI = "http://localhost";
    }

    /**
     * –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ StickerGallery –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
     */
    @Test
    void testStickerGalleryBotExists() {
        System.out.println("üß™ –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ StickerGallery");
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –±–æ—Ç–æ–≤
        var bots = botService.findAll();
        System.out.println("üìã –ù–∞–π–¥–µ–Ω–æ –±–æ—Ç–æ–≤ –≤ –±–∞–∑–µ: " + bots.size());
        
        // –ò—â–µ–º –±–æ—Ç–∞ StickerGallery
        BotEntity stickerGalleryBot = bots.stream()
                .filter(bot -> TEST_BOT_NAME.equals(bot.getName()))
                .findFirst()
                .orElse(null);
        
        assertNotNull(stickerGalleryBot, "–ë–æ—Ç StickerGallery –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
        System.out.println("‚úÖ –ë–æ—Ç StickerGallery –Ω–∞–π–¥–µ–Ω: ID=" + stickerGalleryBot.getId() + 
                ", Name=" + stickerGalleryBot.getName() + 
                ", Username=" + stickerGalleryBot.getUsername());
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –±–æ—Ç–∞ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω
        assertNotNull(stickerGalleryBot.getToken(), "–£ –±–æ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–∫–µ–Ω");
        assertFalse(stickerGalleryBot.getToken().isEmpty(), "–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
        System.out.println("‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–¥–ª–∏–Ω–∞: " + stickerGalleryBot.getToken().length() + ")");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ API
        Response response = given()
                .contentType(ContentType.JSON)
                .when()
                .get("/api/bots")
                .then()
                .statusCode(401) // –î–æ–ª–∂–µ–Ω —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                .extract().response();
        
        System.out.println("‚úÖ API /api/bots —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (—Å—Ç–∞—Ç—É—Å 401)");
    }

    /**
     * –¢–µ—Å—Ç 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è initData –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @Test
    void testInitDataGenerationAndValidation() {
        System.out.println("üß™ –¢–µ—Å—Ç 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è initData");
        
        // –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞
        var bots = botService.findAll();
        BotEntity stickerGalleryBot = bots.stream()
                .filter(bot -> TEST_BOT_NAME.equals(bot.getName()))
                .findFirst()
                .orElseThrow(() -> new RuntimeException("–ë–æ—Ç StickerGallery –Ω–µ –Ω–∞–π–¥–µ–Ω"));
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º initData
        String initData = generateInitData(stickerGalleryBot.getToken());
        System.out.println("üîê –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω initData: " + initData.substring(0, Math.min(100, initData.length())) + "...");
        
        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º initData
        boolean isValid = validator.validateInitData(initData, TEST_BOT_NAME);
        assertTrue(isValid, "InitData –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º");
        System.out.println("‚úÖ InitData –≤–∞–ª–∏–¥–µ–Ω");
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º telegram_id
        Long extractedTelegramId = validator.extractTelegramId(initData);
        assertEquals(TEST_USER_ID, extractedTelegramId, "–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π telegram_id –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å");
        System.out.println("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω telegram_id: " + extractedTelegramId);
    }

    /**
     * –¢–µ—Å—Ç 3: –ü–æ–ª–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤
     */
    @Test
    void testFullAuthenticationAndStickerSetsRetrieval() {
        System.out.println("üß™ –¢–µ—Å—Ç 3: –ü–æ–ª–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤");
        
        // –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞
        var bots = botService.findAll();
        BotEntity stickerGalleryBot = bots.stream()
                .filter(bot -> TEST_BOT_NAME.equals(bot.getName()))
                .findFirst()
                .orElseThrow(() -> new RuntimeException("–ë–æ—Ç StickerGallery –Ω–µ –Ω–∞–π–¥–µ–Ω"));
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º initData
        String initData = generateInitData(stickerGalleryBot.getToken());
        System.out.println("üîê –ò—Å–ø–æ–ª—å–∑—É–µ–º initData –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        Response statusResponse = given()
                .contentType(ContentType.JSON)
                .when()
                .get("/auth/status")
                .then()
                .statusCode(200)
                .body("authenticated", equalTo(false))
                .extract().response();
        
        System.out.println("‚úÖ –°—Ç–∞—Ç—É—Å –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: " + statusResponse.body().asString());
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        Response authStatusResponse = given()
                .contentType(ContentType.JSON)
                .header("X-Telegram-Init-Data", initData)
                .header("X-Telegram-Bot-Name", TEST_BOT_NAME)
                .when()
                .get("/auth/status")
                .then()
                .statusCode(200)
                .extract().response();
        
        System.out.println("‚úÖ –°—Ç–∞—Ç—É—Å —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π: " + authStatusResponse.body().asString());
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤
        Response stickerSetsResponse = given()
                .contentType(ContentType.JSON)
                .header("X-Telegram-Init-Data", initData)
                .header("X-Telegram-Bot-Name", TEST_BOT_NAME)
                .when()
                .get("/api/stickersets")
                .then()
                .statusCode(200)
                .extract().response();
        
        String responseBody = stickerSetsResponse.body().asString();
        System.out.println("‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤: " + responseBody);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π (–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—ã —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        assertFalse(responseBody.equals("[]"), "–°–ø–∏—Å–æ–∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
        System.out.println("‚úÖ –°–ø–∏—Å–æ–∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –Ω–µ –ø—É—Å—Ç–æ–π");
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç initData –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private String generateInitData(String botToken) {
        try {
            // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã initData
            TreeMap<String, String> params = new TreeMap<>();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            params.put("query_id", "AAHdF6IQAAAAAN0XohDhrOrc");
            params.put("auth_date", String.valueOf(Instant.now().getEpochSecond()));
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            String userJson = String.format(
                "{\"id\":%d,\"first_name\":\"%s\",\"last_name\":\"%s\",\"username\":\"%s\",\"language_code\":\"%s\"}",
                TEST_USER_ID,
                TEST_USER_FIRST_NAME,
                TEST_USER_LAST_NAME,
                TEST_USER_USERNAME,
                TEST_USER_LANGUAGE_CODE
            );
            params.put("user", userJson);
            
            // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ (–≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫—Ä–æ–º–µ hash, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
            String dataCheckString = params.entrySet().stream()
                    .map(entry -> entry.getKey() + "=" + entry.getValue())
                    .collect(Collectors.joining("\n"));
            
            // –í—ã—á–∏—Å–ª—è–µ–º HMAC-SHA256 –ø–æ–¥–ø–∏—Å—å
            String secretKey = "WebAppData";
            Mac mac = Mac.getInstance("HmacSHA256");
            SecretKeySpec secretKeySpec = new SecretKeySpec(botToken.getBytes(StandardCharsets.UTF_8), "HmacSHA256");
            mac.init(secretKeySpec);
            
            byte[] hashBytes = mac.doFinal(dataCheckString.getBytes(StandardCharsets.UTF_8));
            String hash = bytesToHex(hashBytes);
            
            // –î–æ–±–∞–≤–ª—è–µ–º hash –∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
            params.put("hash", hash);
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É initData
            String initData = params.entrySet().stream()
                    .map(entry -> entry.getKey() + "=" + entry.getValue())
                    .collect(Collectors.joining("&"));
            
            return initData;
            
        } catch (Exception e) {
            throw new RuntimeException("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ initData", e);
        }
    }
    
    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –±–∞–π—Ç—ã –≤ hex —Å—Ç—Ä–æ–∫—É
     */
    private String bytesToHex(byte[] bytes) {
        StringBuilder result = new StringBuilder();
        for (byte b : bytes) {
            result.append(String.format("%02x", b));
        }
        return result.toString();
    }
}
